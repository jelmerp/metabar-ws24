[
  {
    "objectID": "homework/R.html#why-r",
    "href": "homework/R.html#why-r",
    "title": "Homework: Intro to R",
    "section": "1 Why R?",
    "text": "1 Why R?\nR is a versatile, open source programming/scripting language that’s particularly useful for statistics and data visualization.\nYes, there is a learning curve, and many of us just want to get on with our analysis –\nbut investing in learning R will pay off:\n\nR gives you greater flexibility to do anything you want.\nA greater reproducibility of scripting vs clicking.\nR is highly interdisciplinary – e.g. very useful for analyzing sequencing data but can also be used to create maps and perform GIS analyses, and so on!\nR is more than a platform to perform analysis. Combined with Markdown (a simple text markup language), you can use R to produce sophisticated reports, and create slide decks and websites such as this one!\n\nFurthermore, R:\n\nIs freely available on all platforms, and open source.\nHas a large and welcoming user community.\n\n\n\nLearning Objectives\n\nGet some basic familiarity with R and RStudio\nLearn why and how to use RStudio Projects\nUnderstand objects, functions, and how to use them\nUnderstand the concepts of vector and data.frame\nExplore the structure and the content of a data.frame\nLearn about how R handles missing data"
  },
  {
    "objectID": "homework/R.html#getting-set-up",
    "href": "homework/R.html#getting-set-up",
    "title": "Homework: Intro to R",
    "section": "2 Getting set up",
    "text": "2 Getting set up\n\n2.1 Start an RStudio session at OSC\n\nLog in to OSC at https://ondemand.osc.edu\nClick on Interactive Apps (top bar) and then RStudio Server (all the way at the bottom)\nFill out the form as follows:\n\nCluster: Pitzer\nR version: 4.3.0\nProject: PAS2714\nNumber of hours: 4\nNode type: any\nNumber of cores: 1\n\n\n\n\nClick to see a screenshot\n\n(Note: some values are fill out differently – please use the values from the list above.)\n\n\n\n\n\n\n\nClick the big blue Launch button at the bottom\nNow, you should be sent to a new page with a box at the top for your RStudio Server “job”, which should initially be “Queued” (waiting to start).\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nYour job should start running very soon, with the top bar of the box turning green and saying “Running”.\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nClick Connect to RStudio Server at the bottom of the box, and an RStudio Server instance will open in a new browser tab. You’re ready to go!\n\n\n\n\n2.2 R vs. RStudio\nR simply provides a “console” to type your commands. However, because we want to save our commands in scripts, examine output such a graphics, and so on, we would like an environment that provides all of this side-by-side.\nWe will use RStudio, an excellent “Integrated Development Environment” (IDE) for R. In RStudio, we have a single interface to write code, navigate files on our computer, inspect the objects we create, and visualize plots.\nRStudio is divided into 4 “panes”1:\n\nTop-left: The editor for your scripts and documents.\nBottom-left: The R console.\nTop-right: Your environment/history.\nBottom-left: Your files/plots/packages/help/viewer.\n\n\n\n\nThe RStudio pane layout"
  },
  {
    "objectID": "homework/R.html#interacting-with-r",
    "href": "homework/R.html#interacting-with-r",
    "title": "Homework: Intro to R",
    "section": "3 Interacting with R",
    "text": "3 Interacting with R\n\n3.1 R as a calculator\nThe lower-left RStudio pane, i.e. the R console, is where you can interact with R directly. The &gt; sign is the R “prompt”. It indicates that R is ready for you to type something.\nLet’s start by performing a division:\n\n203 / 2.54\n\n[1] 79.92126\n\n\nR does the calculation and prints the result, and then you get the &gt; prompt again. (The [1] may look a bit weird when there is only one output element; this is how you can keep count of output elements.)\nWith the standard symbols you can use R as a general calculator:\n\n203 * 2.54   # Multiplication\n\n[1] 515.62\n\n203 + 2.54   # Addition\n\n[1] 205.54\n\n\n\n\n\n3.2 Trying some random things…\n\n   203     - 2.54\n\n[1] 200.46\n\n\nThis works: so R just ignores any extra spaces. How about:\n\n203 +\n\n\n\n Now the prompt is a +. What is going on? (Click for the answer)\n\nR is waiting for you to finish the command, since you typed an incomplete command: something has to come after the + to be added to what came before.\nWhile it was obvious here, you will often type incomplete commands without realizing you did so. Just remember that when you see the + prompt, you are missing something in your command: often, you’ll have forgotten a closing parenthesis ) or you accidentally opened up an unwanted opening parenthesis (.\n\nPress the Esc button to get your prompt back.\n\nAnd if we just type a number:\n\n203\n\n[1] 203\n\n\nR will print the number back to us! It turns out that the default, implicit action that R will perform on anything you type is to print it back to us (it is calling a function called print() under the hood).\n\nRather than a number, what if we want R to print back to us some text, which in programming lingo is called a “character string”?\n\nFantastic\n\nError in eval(expr, envir, enclos): object 'Fantastic' not found\n\n\n\n\n What seems to be going wrong here? (Click for the answer)\n\nWhenever you type a character string, R expects to find an “object” with that name. (Or, if you would use parentheses after the string, like string(), it will expect a function.)\nBecause no object called Fantastic exists, R throws an error. To refer to a literal string instead, we need to use quotes (see below).\n\n\nWe can get R to print character strings back to us, and work with them in other ways, as long as we quote the strings:\n\n\"Fantastic\"\n\n[1] \"Fantastic\"\n\n\n\n\"I'm really liking R so far.\"\n\n[1] \"I'm really liking R so far.\"\n\n\nSo, R treats numbers and character strings differently: unlike numbers, character strings need to be quoted. This avoids confusion with objects (we’ll learn about those in a minute) because unquoted character strings are assumed to be objects, and also allows for “special characters” like spaces.\n\n\n\n\n\n\nQuote types\n\n\n\nDouble quotes (\"Fantastic\") and single quotes ('Fantastic') can be used interchangeably in R. Double quotes are preferred by most “style guides”."
  },
  {
    "objectID": "homework/R.html#getting-organized",
    "href": "homework/R.html#getting-organized",
    "title": "Homework: Intro to R",
    "section": "4 Getting Organized",
    "text": "4 Getting Organized\n\n4.1 Need for Scripts and RStudio Projects\nWe can go along like this, typing commands directly into the R console. But to better keep track of what you’re doing, it’s a good idea to write your code in files, i.e. “scripts”. And when we start creating scripts, we need to worry about how we organize the scripts and data for a project.\nIt is good practice to keep a set of related data, analyses, and text self-contained in a single folder, and use that folder as the working directory — in the Unix shell and in R alike. RStudio provides a helpful way to keep your working directory constant through its “Projects”. When you use a Project, your working directory will be the top-level directory of that project.\n\n\n\n4.2 Create a new RStudio Project\nTo create a new RStudio Project inside your personal dir in /fs/ess/PAS2714/users (e.g., for me, the dir /fs/ess/PAS2714/users/jelmer)\n\n\n\n\n\n\nDon’t have a personal dir there? (Click to expand)\n\n\n\n\n\nIf you followed the shell homework, you should have created your own dir within /fs/ess/PAS2714/users.\nIf you don’t have one, you can quickly create it as follows:\n\ndir.create(paste0(\"/fs/ess/PAS2714/users/\", Sys.getenv(\"USER\")))\n\n\n\n\n\nClick File (top bar, below your browser’s address bar) &gt; New Project\nIn the popup window, click Existing Directory.\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nClick Browse... to select your personal dir.\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nIn the next window, you should be in your Home directory (abbreviated as ~), from which you can’t click your way to /fs/ess! Instead, you’ll first have to click on the (very small!) ... highlighted in the screenshot below:\n\n\n\n\n\n\n\nType at least part of the path to your personal dir in /fs/ess/PAS2714/users, e.g. like shown below, and click OK:\n\n\n\n\n\n\n\nNow you should be able to browse/click the rest of the way to your personal directory, something like /fs/ess/PAS2714/users/jelmer.\nClick Choose to pick your selected directory.\nClick Create Project.\n\nRStudio should reload and you should now have your new Project “open”. Your working directory should be the Project’s directory. We can check this using getwd():\n\ngetwd()\n\n/fs/ess/PAS2714/users/jelmer\nFrom now on, we will not change our working directory, and refer to all files relative to our project’s top-level directory.\n\n\n\n4.3 Create an R script\n\nCreate a new R script (File &gt; New File &gt; R Script)\nClick File &gt; Save As to save the script in the scripts dir that you should see within your personal dir.2 Give it a descriptive name like intro-to-R.R.\n\nFrom now on, type your commands into this script and execute the commands from there.\nTo send code from your script to the console, press Ctrl + Enter. This will copy the line of code that your cursor is at to the R console and execute it, and then the cursor will move to the next line.\n\n\n\n4.4 Commenting\nYou can use # signs to comment your code:\n\n# Divide by 2.54 to get the wingspan in inches:\n203 / 2.54    # Original measurement was in cm\n\n\nAnything to the right of a # is ignored by R, meaning it won’t be executed\nYou can use # both at the start of a line (entire line is a comment) or anywhere in a line following code (rest of the line is a comment)\nIn your R script, comments are formatted differently so you can clearly distinguish them from code\n\nWe recommend that you use lots of comments in your R scripts! They are useful not only for others that you may share your code with, but also for yourself when you look back at your code a day, a month, or a year later."
  },
  {
    "objectID": "homework/R.html#r-objects",
    "href": "homework/R.html#r-objects",
    "title": "Homework: Intro to R",
    "section": "5 R objects",
    "text": "5 R objects\n\n5.1 Assigning stuff to objects\nWe can assign pretty much anything to an object with the assignment operator, &lt;-3. (This is a smaller-than sign &lt; followed by a dash -.)\nA few examples:\n\nwingspan_cm &lt;- 203\nconversion &lt;- 2.54\n\nType that into your script, and use Ctrl/Cmd + Enter twice to send it to the console.\n\n\n\n\n\n\nThe Environment tab\n\n\n\nThe objects you create get added to your “environment”, which RStudio shows in the Environment tab in the top-right panel — check that wingspan_cm and conversion are indeed there.\n\n\nAfter you’ve assigned a number to an object, you can use it in calculations like so:\n\nwingspan_cm / conversion\n\n[1] 79.92126\n\n\nOr, similarly:\n\nwingspan_inch &lt;- wingspan_cm / conversion\nwingspan_inch\n\n[1] 79.92126\n\n\nThis illustrates that when you execute code with objects, R substitutes the object name that you provide by its contents under the hood. In other words, the object is just a reference to the underlying value(s).\n\n\n5.2 Object names\nObjects can be given almost any name such as x, current_temperature, or subject_id. Some pointers on object names:\n\nBecause R is case sensitive, wingspan_inch is different from Wingspan_inch!\nAn object name cannot contain spaces — so for readability, you should separate words using:\n\nUnderscores: wingspan_inch (this is called “snake case”, which we often use in Code Club)\nPeriods: wingspan.inch\nCapitalization: wingspanInch or WingspanInch (“camel case”)\n\nYou will make things easier for yourself by naming objects in a consistent way, for instance by always sticking to your favorite case style like “snake case.”4\nObject names can contain but cannot start with a number: x2 is valid but 2x is not. (There are also some other restrictions that are beyond the scope of this introduction5.)\nMake object names descriptive yet not too long — this is not always easy!\n\n\n Exercise\nWhat is the value of y after doing all of the following?\n\nx &lt;- 50\ny &lt;- x * 2\nx &lt;- 80\n\n\n\n Solution (click here)\n\nObjects don’t get linked to each other, so if you change one, it won’t affect the values of any others. Therefore, y will keep the value 100."
  },
  {
    "objectID": "homework/R.html#functions",
    "href": "homework/R.html#functions",
    "title": "Homework: Intro to R",
    "section": "6 Functions",
    "text": "6 Functions\nEarlier, we divided 203 by 2.54, but what if we wanted to round the resulting number? Like for many things you may want to do in R, there is a function for that.\nFunctions are used by typing their name followed by parentheses:\n\nround(203 / 2.54)\n\n[1] 80\n\n\nHere, round() is a function that rounds a number. The value in the parentheses is called a function “argument”, which is used in the execution of the function.\n\n\n6.1 Using named arguments\nFunctions can have more than one argument, and some of them may have default values.\nThere are some functions that take many arguments and it can get confusing trying to keep them in order. In that case, it is better to explicitly name the arguments.\nWhen you type a function name and pause for a moment, the arguments, their names, and their default values (i.e., the value if the argument is left unspecified) will be shown.\n\n\n\n\n\n\n\n What is the second argument for round() and what is its default value? (Click here)\n\nround has a second argument digits whose default is 0, such that numbers will be rounded to whole integers.\n\nBelow is an example using named arguments with round(). When the arguments are named, the order doesn’t matter! You might also enter the first few important arguments positionally, and later ones by naming them.\n\nround(x = 1.538462, digits = 2)\n\n[1] 1.54\n\nround(digits = 2, x = 1.538462)\n\n[1] 1.54\n\nround(1.538462, digits = 2)\n\n[1] 1.54\n\n\nAlso here, we can directly plug in objects:\nwingspan_in &lt;- 203 / 2.54\nround(wingspan_in)\nOr “nest” functions — here we are adding the log() function to compute the natural log:\nlog(round(203 / 2.54 ))\n\n\n What is the order of execution in the last command? (Click for the solution)\n\nround() is executed first, and the output of round() is used as the input of log()."
  },
  {
    "objectID": "homework/R.html#getting-help",
    "href": "homework/R.html#getting-help",
    "title": "Homework: Intro to R",
    "section": "7 Getting help",
    "text": "7 Getting help\nAs we saw, when we typed round and paused for a moment, we got a pop-up with information about the function.\nAlternatively, you could type:\n\n?round\n\n… and the documentation for the function will show up in the lower-right pane.\nThis documentation is often a bit too detailed, and can be terse, so it takes some practice to read. Usage, Arguments, and at the bottom, Examples, are most useful.\nGoogling what you want to do, even if you don’t know whether a function exists, will work too (e.g. “rounding a number in r”)."
  },
  {
    "objectID": "homework/R.html#vectors",
    "href": "homework/R.html#vectors",
    "title": "Homework: Intro to R",
    "section": "8 Vectors",
    "text": "8 Vectors\nA vector is the most common and basic data structure in R, and is composed of a series of values of the same type6. We can assign a series of values to a vector using the c() function (for “combine”). For example:\n\nwingspans_cm &lt;- c(11.8, 203, 18.2, 27.9)\n\nA vector can also contain characters – but again, quoting is important, or R will think the strings are objects:\n\nbirds &lt;- c(\"hummingbird\", \"bald_eagle\", \"chickadee\", \"cardinal\")\n\nAs mentioned, all of a vector’s elements have to be of the same type of data. The function class() indicates what kind of data you are working with:\n\nclass(wingspans_cm)\n\n[1] \"numeric\"\n\nclass(birds)\n\n[1] \"character\"\n\n\n\n\n8.1 Data types in R\nThe classes we saw above are different types of atomic vectors, R’s simplest data type. The 4 most common atomic vector types are:\n\n\"numeric\" (or \"double\") – floating point numbers (numbers with decimals)\n\"integer\" – integer numbers (no decimals)\n\"character\" – character strings\n\"logical\" – TRUE and FALSE (also known as boolean)\n\nAlso worth mentioning in this context is:\n\nfactor – Character strings with a discrete set of possible values, used mostly for statistical tests and plotting7.\n\n\n\n\n\n\n\nSide note: Vector coercion – when not all elements are of the same type. (Click to expand)\n\n\n\n\n\nWhat happens if we try to mix vector types (e.g., “character and numeric”) in a single vector? R converts them to all be the same type, and it does so without telling us about it. For example:\n\nnum_char &lt;- c(1, 2, 3, \"a\")\nclass(num_char)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\n8.2 Vectorization!\nLet’s say we wanted to convert our vector of wingspans to inches: dividing each length in centimeters by 2.54.\nIt turns out that this is as easy as dividing the vector by 2.54:\n\n# wingspans_cm &lt;- c(11.8, 203, 18.2, 27.9)  # Still working with the same wingspans_cm vector\n\nwingspans_in &lt;- wingspans_cm / 2.54\nwingspans_in\n\n[1]  4.645669 79.921260  7.165354 10.984252\n\n\nThis works because R “vectorizes” operations whenever it can. This means that in this case, each element in the vector weights_cm will be divided by 2.54 – this number is recycled to match the number of weights. Very useful!\nSimilarly, we can use two vectors of equal length to quickly operate on each element of the vector:\n\nsizes_cm &lt;- c(7.62, 90, 13.1, 21.8)\n\nratio &lt;- wingspans_cm / sizes_cm\nratio\n\n[1] 1.548556 2.255556 1.389313 1.279817\n\n\n\n\n Exercise: Temperature conversion\nRecall that you can convert a temperature of, for example, 26 Fahrenheit to Celcius as follows:\n\n# (26°F - 32) / 1.8 = -3.3°C\n(26 - 32) / 1.8\n\n[1] -3.333333\n\n\nCreate and store a vector with the values 26, 21, 24, 32, 33, 41, 51, representing temperatures in Fahrenheit.\nNow convert all the values in this vector from Fahrenheit to Celcius.\n\n\nClick here for the solution\n\nThanks to R’s vectorization, you don’t have to convert these values 1-by-1:\n\ntemps_f &lt;- c(26, 21, 24, 32, 33, 41, 51)\n\n(temps_f - 32) / 1.8\n\n[1] -3.3333333 -6.1111111 -4.4444444  0.0000000  0.5555556  5.0000000 10.5555556\n\n\n\n\n\n\n\n8.3 Other data structures in R\nWhile vectors can be composed of one of several data types, they, in turn, are one of several data structures that R uses. Other important ones are8:\n\ndata.frame – A rectangular data structure where each column can be a different data type.\nmatrix – A rectangular data structure of a single data type.\nlist – A very flexible data structure that we will not further discuss here."
  },
  {
    "objectID": "homework/R.html#data-frames",
    "href": "homework/R.html#data-frames",
    "title": "Homework: Intro to R",
    "section": "9 Data Frames",
    "text": "9 Data Frames\nA data frame (formal object type: data.frame) is a rectangular data structure in which:\n\nRows are observations and columns are variables.\nEach column can be of a different type (numeric, character, etc.)\nSince each column is a vector, all the values (cells) within a column are of the same type.\nAll columns have the same length.\n\n\n\n\n\n\n\n9.1 Create, write, and read a data frame\nWe can easily create a data frame by hand using the data.frame() function and “column_name = column_vector” notation for each column:\n\nbirds_df &lt;- data.frame(species = birds,\n                       wingspan = wingspans_cm,\n                       size = sizes_cm,\n                       n_eggs = c(2, 2, 7, 4)) \n\n\nbirds_df\n\n      species wingspan  size n_eggs\n1 hummingbird     11.8  7.62      2\n2  bald_eagle    203.0 90.00      2\n3   chickadee     18.2 13.10      7\n4    cardinal     27.9 21.80      4\n\n\nMost often, however, you’ll be reading your data frames from files. And you’ll also want to save your modified data frames.\nSo let’s practice writing and reading a data frame to and from a “CSV” file — a plain-text, tabular file in which columns are delimited by commas (“Comma-Separated Values” file).\n\n# Write a data frame to CSV format:\nwrite.csv(x = birds_df, file = \"sandbox/bird-data.csv\", row.names = FALSE)\n\n\n\n\n\n\n\nCurious what the file itself looks like? (Click to expand)\n\n\n\n\n\nIf you want to do the following yourself: next to the R Console, there is tab called Terminal, which will open a Unix shell (!). In there, type the following:\ncat sandbox/bird-data.csv\n\"species\",\"wingspan\",\"size\",\"n_eggs\"\n\"hummingbird\",11.8,7.62,2\n\"bald_eagle\",203,90,2\n\"chickadee\",18.2,13.1,7\n\"cardinal\",27.9,21.8,4\n\n\n\nNow we read our data frame back in from the file:\n\nbirds_df_2 &lt;- read.csv(\"sandbox/bird-data.csv\")\n\nbirds_df_2\n\n      species wingspan  size n_eggs\n1 hummingbird     11.8  7.62      2\n2  bald_eagle    203.0 90.00      2\n3   chickadee     18.2 13.10      7\n4    cardinal     27.9 21.80      4\n\n\n\n\n\n9.2 Inspecting a Data Frame\nUse str() to look at the structure of the data.\n\nstr(birds_df)\n\n'data.frame':   4 obs. of  4 variables:\n $ species : chr  \"hummingbird\" \"bald_eagle\" \"chickadee\" \"cardinal\"\n $ wingspan: num  11.8 203 18.2 27.9\n $ size    : num  7.62 90 13.1 21.8\n $ n_eggs  : num  2 2 7 4\n\n\nThis tells us the number rows and columns, and for each column, gives information about the data type and shows the first few values.\nAnother useful function is summary():\n\nsummary(birds_df)\n\n   species             wingspan           size           n_eggs    \n Length:4           Min.   : 11.80   Min.   : 7.62   Min.   :2.00  \n Class :character   1st Qu.: 16.60   1st Qu.:11.73   1st Qu.:2.00  \n Mode  :character   Median : 23.05   Median :17.45   Median :3.00  \n                    Mean   : 65.22   Mean   :33.13   Mean   :3.75  \n                    3rd Qu.: 71.67   3rd Qu.:38.85   3rd Qu.:4.75  \n                    Max.   :203.00   Max.   :90.00   Max.   :7.00  \n\n\nFinally, in RStudio, you can open a data frame in a spreadsheet-like manner by clicking on an object in the “Environment” pane, or equivalently, using View():\n\nView(birds_df)\n\n\n\n\n9.3 Functions to get an overview of data frames\n\nSize:\n\ndim() – Dimensions: c(number of rows, number of columns)\nnrow() – Number of rows\nncol() – Number of columns\nlength() – For a dataframe: number of columns. For a vector: number of elements.\n\nContent:\n\nhead() – shows the first 6 rows\ntail() – shows the last 6 rows\n\nNames:\n\nnames() or colnames() – column names\nrownames() – row names\n\nSummary:\n\nstr() – structure of the object and information about the class, length and content of each column\nsummary() – summary statistics for each column\n\n\n\n\n Exercise: Cars\nmtcars is an example data frame that is always available in R.\n\nUse head() to print the first 6 rows of the mtcars dataframe.\n\n\n\nClick here for the solution\n\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\nHow many rows and columns does mtcars contain?\n\n\n\nClick here for the solution\n\nIt contains 32 rows and 11 columns:\n\ndim(mtcars)\n\n[1] 32 11\n\n\nOr:\n\nnrow(mtcars)\n\n[1] 32\n\nncol(mtcars)\n\n[1] 11\n\n\n\n\nGet a vector with the column names of mtcars.\n\n\n\nClick here for the solution\n\n\ncolnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\""
  },
  {
    "objectID": "homework/R.html#subsetting",
    "href": "homework/R.html#subsetting",
    "title": "Homework: Intro to R",
    "section": "10 Subsetting",
    "text": "10 Subsetting\n\n10.1 Basic subsetting of data frames and vectors\nWe can pull out parts of vectors and data frames using square brackets.\n\nVectors\nFor example, for vectors:\n\n# Remind ourselves what this vector contains\nwingspans_cm\n\n[1]  11.8 203.0  18.2  27.9\n\n\n\n# Get the first element\nwingspan_cm[1]\n\n[1] 203\n\n\n\n# Get the third element\nwingspan_cm[3]\n\n[1] NA\n\n\nYou can pull out larger “slices” from the vector by providing vectors of indices:\n\n# Get the first and the third element\nwingspan_cm[c(1, 3)]\n\n[1] 203  NA\n\n\nThe : operator gives you a sequence of consecutive values, which you can also using for slicing:\n\n# Get the second through the fourth element\nwingspan_cm[2:4]\n\n[1] NA NA NA\n\n\n\n\n\nData frames\nTo subset data frames, we need to provide two values: row and column, with a comma between them.\nFor example, to get the element in the 1st row, 1st column:\n\nbirds_df[1, 1]\n\n[1] \"hummingbird\"\n\n\nTo get the element in the 2nd row, 3rd column:\n\nbirds_df[2, 3]\n\n[1] 90\n\n\nTo get the entire 2nd row, leave the column part blank:\n\nbirds_df[2, ]\n\n     species wingspan size n_eggs\n2 bald_eagle      203   90      2\n\n\nAnd to extract the entire 3rd column, leave the row part blank:\n\nbirds_df[, 3]\n\n[1]  7.62 90.00 13.10 21.80\n\n\nTo extract a column, you can also refer to it by name, in multiple ways:\n\nbirds_df$size\n\n[1]  7.62 90.00 13.10 21.80\n\n\n\nbirds_df[, \"size\"]\n\n[1]  7.62 90.00 13.10 21.80\n\n\n\n\n\n Exercise: Subsetting\n\nExtract the 1st-3rd rows and the 4th colum from birds_df.\n\n\n\nClick here for the solution\n\n\nbirds_df[1:3, 4]\n\n[1] 2 2 7\n\n\nOr:\n\nbirds_df[c(1, 2, 3), 4]\n\n[1] 2 2 7\n\n\n\n\nUse the $ notation to extract the n_eggs column from birds_df.\n\n\n\nClick here for the solution\n\n\nbirds_df$n_eggs\n\n[1] 2 2 7 4\n\n\n\n\n\n\n\n10.2 Conditional subsetting\nAnother common way of subsetting is by using a logical vector of the same length as the original vector: any TRUE will select the element with the same index, while FALSE will not:\n\nwingspans_cm\n\n[1]  11.8 203.0  18.2  27.9\n\n# This will extract the 1st and the 4th element\nwingspans_cm[c(TRUE, FALSE, FALSE, TRUE)]\n\n[1] 11.8 27.9\n\n\nTypically, these logical vectors are not typed by hand, but are the output of other functions or logical tests. For instance, if you wanted to select only the values above 20:\n\n# This will return a logical vector with TRUE for indices that meet the condition\nwingspans_cm &gt; 20\n\n[1] FALSE  TRUE FALSE  TRUE\n\n\n\n# We can use such a vector to select only the values above 20\nwingspans_cm[wingspans_cm &gt; 20]\n\n[1] 203.0  27.9\n\n\n\n\n== and %in%\nYou can test for equality with ==:\n\n\"chickadee\" == \"chickadee\"\n\n[1] TRUE\n\n# Which element(s) of the birds vector equal \"chickadee\"\nbirds == \"chickadee\"\n\n[1] FALSE FALSE  TRUE FALSE\n\n# Extract the element(s) of the birds vector that equal \"chickadee\"\nbirds[birds == \"chickadee\"]\n\n[1] \"chickadee\"\n\n\nIf you want to use a search vector with multiple items, use %in% instead:\n\n# Which element(s) of the birds vector match any of the 3 birds on the right-hand side\nbirds %in% c(\"chickadee\", \"hummingbird\", \"shoebill\")\n\n[1]  TRUE FALSE  TRUE FALSE\n\n# Extract those elements\nbirds[birds %in% c(\"chickadee\", \"hummingbird\", \"shoebill\")] \n\n[1] \"hummingbird\" \"chickadee\"  \n\n\n\n\n\n Exercise: Conditional subsetting\nGiven the following inhabitants of a house, and a list of species to keep:\n\ninhabitants &lt;- c(\"rat\", \"rat\", \"dog\", \"mouse\", \"cat\", \"cat\")\nkeep &lt;- c(\"dog\", \"cat\")\n\n\nWhat do you think the following would return? (Test it and see if you were right.)\n\ninhabitants %in% keep\n\n\nkeep %in% inhabitants\n\n\n\n\nClick here for the solution\n\n\ninhabitants %in% keep\n\n[1] FALSE FALSE  TRUE FALSE  TRUE  TRUE\n\n\n\nkeep %in% inhabitants\n\n[1] TRUE TRUE\n\n\n\n\nExtract the dogs and cats from the inhabitants vector with logical subsetting.\n\n\n\nClick here for the solution\n\n\ninhabitants[inhabitants %in% keep]\n\n[1] \"dog\" \"cat\" \"cat\""
  },
  {
    "objectID": "homework/R.html#miscellaneous",
    "href": "homework/R.html#miscellaneous",
    "title": "Homework: Intro to R",
    "section": "11 Miscellaneous",
    "text": "11 Miscellaneous\n\n11.1 Missing data\nAs R was designed to analyze datasets, it includes the concept of missing data (which is uncommon in other programming languages). Missing data are represented as NA (for “Not Available”).\n\nheights &lt;- c(2, 4, 4, NA, 6)\n\nWhen doing operations on numbers, most functions will return NA if the data you are working with include missing values. It is a safer behavior as otherwise you may overlook that you are dealing with missing data. You can add the argument na.rm=TRUE to calculate the result while ignoring the missing values.\n\nmean(heights)\n\n[1] NA\n\nmean(heights, na.rm = TRUE)\n\n[1] 4\n\n\n\n\n\n11.2 Packages\nThe functions that we have been using so far (and many, many more) are available in any R session as soon as you start R (we refer to this functionality as “base R”). However, when doing specialized analyses such as in microbiomics, rather than coding up everything using the basic building blocks in R, we can load add-on code that will allow us to use “high-level” functions specifically geared towards the effective analyses of such data.\nThis type of add-on code is distributed in R packages. The default repository for R packages is CRAN, and you install CRAN packages with the install.packages() function:\n\n# Don't run this\ninstall.packages(\"tidyverse\")\n\nIf you’re doing bioinformatic analyses in R, as we will be doing, you will encounter packages that are not on CRAN but are on “Bioconductor”. To install a package from Bioconductor, use the BiocManager package – for example:\n\n# Don't run this\ninstall.packages(\"BiocManager\")  # Install the BiocManager package\nBiocManager::install(\"dada2\")    # Install the dada2 package from Bioconductor\n\n\n\n\n\n\n\nInstallation issues at OSC\n\n\n\nThe installation of some packages is tricky at OSC nowadays, and if you were to try the commands above, they would likely fail. With a bit of extra effort, we can install these packages, but during the workshop, we will be using a custom collection of pre-installed packages.\n\n\n\n\n\n11.3 Saving your data\nSome very brief notes on saving your data in R:\n\nWe already saw the use of write.csv() to save data frames, and you can also use one of readr’s writing functions.\nTo save R objects “as is”, which can be useful when you’re working with complex S4 objects that may have taken a long time to generate, like a phyloseq object, you can use:\n\n# Don't run this\n\n# Save an object:\nsaveRDS(my_phyloseq_object, \"my_phyloseq_object.RDS\")\n\n# Load it again in a new R session:\nmy_phyloseq_object &lt;- readRDS(\"my_phyloseq_object.RDS\")\n\nA general recommendation is to not rely on your R session to keep things around, especially “overnight”. Devise your workflow such that you are always saving important objects and results outside of R, and can always use your R script to restart from where you left off.\n\n\n\n\n\n\n\nOptional: Change a setting to not let R save your Workspace\n\n\n\nAlong the line of the above, the default behavior of saving and restoring your “Workspace”, which are all the items (objects) that you create during an R session, is bad practice. Instead, you should always recreate your environment from a script and/or saved files with individual pieces of data.\nChange the following setting to prevent R from saving your Workspace whenever you close R:\n\nClick Tools (top bar, below your browser’s address bar) &gt; Global Options\nIn the pop-up window (stay on the General tab), change the settings under the “Workspace” heading to:\n\n\n\n\n\n\n\n\n\n\n\n11.4 S4 Objects\nWhile the object types we have discussed so far are so-called “S3” objects, we will also be seeing “S4” objects in this workshop. S4 object are commonly used by bioinformatics packages, for instance phyloseq.\nIn a nutshell, S4 objects allow for complicated, multifaceted datasets (e.g. multiple dataframes with and metadata) to be represented in a single object in a standardized way.\nUnlike S3 objects, S4 objects are usually not manipulated by simple assignment with &lt;-, but with specialized functions that are sure to adhere to the strict object definitions."
  },
  {
    "objectID": "homework/R.html#where-to-go-from-here",
    "href": "homework/R.html#where-to-go-from-here",
    "title": "Homework: Intro to R",
    "section": "12 Where to go from here",
    "text": "12 Where to go from here\nThis document only scratched the surface of R, but it has hopefully provided a good starting point for working with R.\nHere are some potential next steps:\n\nLearn about plotting with ggplot2. Start with these two OSU Code Club sessions:\n\nggplot part I\nggplot part II\n\nLearn about data wrangling with tidyverse packages, especially dplyr and tidyr. Start with these two OSU Code Club sessions:\n\nIntroduction to the tidyverse\nTidyverse 2: More dplyr Data Wrangling\n\n\nBoth of those topics and some other material are also covered in this excellent Carpentries workshop R for Reproducible Scientific Analysis.\nIf you want to start with a book, I would recommend Wickham & Grolemund’s “R for Data Science”, which is freely available on the web in a really nice format here.\n\n\n\n\n\n\nWant to try the tidyverse (includes ggplot2) at OSC?\n\n\n\nIf you want to try using the tidyverse in RStudio at OSC now, then load it as follows:\n\n.libPaths(\"/fs/ess/PAS0471/jelmer/R/metabar\")\ndyn.load(\"/fs/ess/PAS0471/jelmer/software/GLPK/lib/libglpk.so.40\", local = FALSE)\nlibrary(tidyverse)\n\n\n\n\n\n\nAttribution\nThis material was modified after material from The Carpentries, especially from this Data Carpentry workshop and this “R for Ecology” workshop."
  },
  {
    "objectID": "homework/R.html#footnotes",
    "href": "homework/R.html#footnotes",
    "title": "Homework: Intro to R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe placement of these panes and their content can be customized.↩︎\nYou created this in the shell introduction. If you don’t have it, create it now.↩︎\nIn RStudio, typing Alt + - will write &lt;- in a single keystroke. You can also use = as assignment, but that symbol can have other meanings, and so I recommend sticking with the &lt;- combination.↩︎\nIt is also recommended to use nouns for variable names, and verbs for function names. For more, two popular R style guides are Hadley Wickham’s and Google’s.↩︎\nFor example, there are some names that cannot be used because they are the names of fundamental keywords in R (e.g., if, else, for, see here for a complete list). In general, it’s also best not to use the names of existing functions, even though this is possible.↩︎\nTechnically, a vector can have a length of 1, so our earlier single numbers were vectors too.↩︎\nThis is technically a type of data structure.↩︎\nNote, that technically, factors are a data structure, but they are more intuitively thought of as a data type↩︎"
  },
  {
    "objectID": "homework/instructions.html",
    "href": "homework/instructions.html",
    "title": "Homework Instructions",
    "section": "",
    "text": "Before the workshop starts, please work your way through the following two pages on this website:\n\nHomework: Intro to the Unix Shell\nHomework: Intro to R\n\n\n\n\n\n\n\n\nPrefer in-person instruction?\n\n\n\nSend an email to Jelmer Poelstra (poelstra.1) — if there is interest, we can schedule a pre-workshop session on Mon the 11th or Tue the 12th.\n\n\n\n\n\n\n\n\n\nAlready have experience with this?\n\n\n\nIf you already have substantial experience with one or both of these topics, we ask you to still do the following:\n\nSkim through the pages for a refresher and if you see unfamiliar stuff, practice with it.\nAt OSC, create your own dir and copy the workshop’s data: follow Unix Shell sections 2.1, and 5.1-5.2.\nAt OSC, create an RStudio Project: go through the R sections 2.1 and 4.2.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Amplicon Metabarcoding Workshop",
    "section": "",
    "text": "Day\nTime\nTopic\nBy\n\n\n\n\nWed\n1 - 2 pm\nLecture: Intro to metabarcoding\nTim\n\n\n\n2:15 - 3 pm\nLab: Intro to OSC\nJelmer\n\n\n\n3 - 4:30 pm\nLab: QC & trimming\nJelmer\n\n\nThu\n1 - 2 pm\nLecture: ASV/OTU calling and pipeline considerations\nSoledad\n\n\n\n2:15 - 3:15 pm\nLab: Calling ASVs with the DADA2 pipeline\nTim\n\n\n\n3:30 - 4:30 pm\nLab: Alpha & beta diversity\nTim\n\n\nFri\n1 - 2 pm\nLab: Differential abundance with DESeq2\nMelanie\n\n\n\n2 - 3 pm\nLab: Network analysis\nMelanie\n\n\n\n3 - 4 pm\nLab: Core microbiome analysis\nFiama\n\n\n\n4 - 4:30 pm\nLab: Metadata and data submission\nSoledad\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "03_qc-trim.html#introduction",
    "href": "03_qc-trim.html#introduction",
    "title": "Read QC and Trimming",
    "section": "Introduction",
    "text": "Introduction\nThe first series of steps our analysis workflow concerns the quality control (QC) & “pre-processing” of the reads.\nThe QC part will leave the data untouched, whereas the pre-processing involved the removal of unwanted bits of sequence: primers. After the pre-processing, we will still have FASTQ files, just with somewhat less content.\nSpecifically, we will go through the following steps:\n\nQC with FastQC\nSummarizing FastQC results with MultiQC\nRemoving primers with Cutadapt\n\n\n\n\n\n\n\n\nYou should have an active VS Code session. If not, follow these steps (Click to expand)\n\n\n\n\n\nStart a new VS Code session with an open terminal:\n\nLog in to OSC’s OnDemand portal at https://ondemand.osc.edu.\nIn the blue top bar, select Interactive Apps and then near the bottom of the dropdown menu, click Code Server.\nIn the form that appears on a new page:\n\nSelect OSC project PAS2714\nThe starting directory: /fs/ess/PAS2714/&lt;user&gt; (replace &lt;user&gt; with your username)\nNumber of hours: 3\nClick Launch.\n\nOn the next page, once the top bar of the box has turned green and says Runnning, click Connect to VS Code.\nOpen a Terminal by clicking      =&gt; Terminal =&gt; New Terminal."
  },
  {
    "objectID": "03_qc-trim.html#fastq-files",
    "href": "03_qc-trim.html#fastq-files",
    "title": "Read QC and Trimming",
    "section": "1 FASTQ files",
    "text": "1 FASTQ files\n\n1.1 The FASTQ format\nFASTQ is a very common output format of high-throughput sequencing machines — at least from Illumina sequencing, you will almost always receive the sequences in this format. Like most genomic data files, these are plain text files, and each sequence that is read by the sequencer (i.e., each “read”) forms one FASTQ entry represented by four lines. The lines contain, respectively:\n\nA header that starts with @ and e.g. uniquely identifies the read\nThe sequence itself\nA + (plus sign)\nOne-character quality scores for each base in the sequence\n\n\n\n\n\nOne entry (read) in a FASTQ file covers 4 lines. The header line is annotated, with some of the more useful components highlighted in red. For viewing purposes, this read (at only 56 bp) is shorter than what is typical.\n\n\n\nThe “Q” in FASTQ stands for “quality”, to contrast this format with FASTA, a more basic and generic format that does not include base quality scores. FASTQ files have the extension .fastq or .fq, but they are very commonly gzip-compressed, in which case their name ends in .fastq.gz or .fq.gz.\n\n\n\n\n\n\nFASTQ quality scores (Click to expand)\n\n\n\n\n\nThe quality scores we saw in the read above represent an estimate of the error probability of the base call. Specifically, they correspond to a numeric “Phred” quality score (Q), which is a function of the estimated probability that a base call is erroneous (P):\n\nQ = -10 * log10(P)\n\nFor some specific probabilities and their rough qualitative interpretations for Illumina data:\n\n\n\n\n\n\n\n\n\nPhred quality score\nError probability\nRough interpretation\nASCII character\n\n\n\n\n10\n1 in 10\nterrible\n+\n\n\n20\n1 in 100\nbad\n5\n\n\n30\n1 in 1,000\ngood\n?\n\n\n40\n1 in 10,000\nexcellent\n?\n\n\n\nThis numeric quality score is represented in FASTQ files not by the number itself, but by a corresponding “ASCII character” (last column in the table). This allows for a single-character representation of each possible score — as a consequence, each quality score character can conveniently correspond to (& line up with) a base character in the read. (For your reference, here is a complete lookup table — look at the top table, “BASE=33”).\n\n\n\n\n\n\n1.2 Our FASTQ files\n\nListing our FASTQ files\nFirst, let’s take a look at our list of FASTQ files:\nls -lh data/fastq\ntotal 150M\n-rw-r-----+ 1 jelmer PAS0471 2.0M Mar  1 17:09 NW102AB_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.6M Mar  1 17:09 NW102AB_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.3M Mar  1 17:09 NW102C_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 3.0M Mar  1 17:09 NW102C_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 1.9M Mar  1 17:09 NW103AB_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.6M Mar  1 17:09 NW103AB_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.3M Mar  1 17:09 NW103C_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 3.1M Mar  1 17:09 NW103C_R2.fastq.gz\n# [...output truncated...]\nNote in the file listing above that:\n\nThere are two files per sample: _R1 (forward reads) and _R2 (reverse reads). This indicates that we have data from paired-end reads, as is customary with amplicon metabarcoding.\nThe files all have a .gz extension, indicating they have been compressed with the gzip utility.\n\n\n\n\n\n1.3 Viewing FASTQ files\nNext, we’ll take a peak inside one of these FASTQ files.\nThe head command prints the first lines of a file. Let’s use it try to and print 8 lines, which should show us two reads:\nhead -n 8 data/fastq/NW102AB_R1.fastq.gz\n�\nԽے�8�E��_1f�\"�QD�J��D�fs{����Yk����d��*��\n|��x���l޴�j�N������?������ٔ�bUs�Ng�Ǭ���i;_��������������|&lt;�v����3��������|���ۧ��3ĐHyƕ�bIΟD�%����Sr#~��7��ν��1y�Ai,4\nw\\]\"b�#Q����8��+[e�3d�4H���̒�l�9LVMX��U*�M����_?���\\[\"��7�s\\&lt;_���:�$���N��v�}^����sw�|�n;&lt;�&lt;�oP����\ni��k��q�ְ(G�ϫ��L�^��=��&lt;���K��j�_/�[ۭV�ns:��U��G�z�ݎ�j����&��~�F��٤ZN�'��r2z}�f\\#��:�9$�����H�݂�\"�@M����H�C�\n�0�pp���1�O��I�H�P됄�.Ȣe��Q�&gt;���\n�'�;@D8���#��St�7k�g��|�A䉻���_���d�_c������a\\�|�_�mn�]�9N������l�٢ZN�c�9u�����n��n�`��\n\"gͺ�\n    ���H�?2@�FC�S$n���Ԓh�       nԙj��望��f      �?N@�CzUlT�&�h�Pt!�r|��9~)���e�A�77�h{��~��     ��\n# [...output truncated...]\n\n\nOuch! 😳 What went wrong here? (Click for the solution)\n\nWhat happened here is that we are directly seeing the contents of the compressed file, which is simply not human-readable.\n\n\n\n\n\n\n\n\nNo need to decompress\n\n\n\nTo get around the problem we just encountered with head, we might be inclined to uncompress these files, which we could do with the gunzip command. However, uncompressed files take up several times as much disk storage space as compressed ones.\nFortunately, we don’t need to decompress them:\n\nAlmost any bioinformatics tool will accept compressed FASTQ files.\nWe can still view these files in compressed form, as shown below.\n\n\n\nInstead, we’ll use the less command, which will automatically display gzip-compressed files in human-readable form:\nless -S data/fastq/NW102AB_R1.fastq.gz\n@M02815:77:000000000-KPK85:1:2101:3678:10660 1:N:0:CCTAAGAC+TTCTAGCT\nCGAGCAATCCACTCGAGTGCCAGCAGCCGCAGTAATACGGAGGGTGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGGGCGCGTAGGCGGCGCGGATAGTCGGCGGTGAAAGCCCGGAGCTCAACTCCGGGTCGGCCGTCGATACTTCCGGGCTTGAGCACTGTAGAGGCAGATGGAATTCCGGGTGTAGCGGTGGAATGCGTAGAGATCCGGAAGAACACCGGTGGCGAAGGCGGTCTGCTGGGCAGTTGCTGACGCTGATGCGCGACAGCGTGGGGAGCAAACAGGATTAGATACC\n+\nCCCCCGGGGGGGGGGGGGGFGGGGGGGGGG+CFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGFGGGGGGGGGGGGGGGGEGGGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGGGFGGFGFFFFEBFFGFFFDGFGFGBFGFGFGFFFF6?FFFGBF?FBFFF\n@M02815:77:000000000-KPK85:1:2108:2535:14400 1:N:0:CCTAAGAC+TTCTAGCT\nCGAGCAATCCACTCGAGTGTCAGCCGCCGCGGTAATACAGAGGTCCCGAGCGTTGTTCGGATTCATTGGGCGTAAAGGGTGCGTAGGCGGCGGGGAAAGTCTGATGTGAAATCCTGGGGCTCAACCCTGGAACTGCATTGGATACTTCCTTGCTAGAGTACTGGAGAGGAAACTGGAATTTACGGTGTAGCAGTGAAATGCGTAGAGATCGTAAGGAAGACCAGTGGCGAAGGCGAGTTTCTGGACAGTTACTGACGCTGAGGCACGAAGGCCAGGGGAGCAAACGGGATTAGATACC\n+\nCCCCCCGFGFGGGC-FFFGFGFFGGDFFGGGGGECGEGGAEGGGGGGGFGGDGG7CFFGGDCCFGGFCF8FGGGGGGCEGDGGGGGCGGGGGGDEGGGGBFGGDFGGGDG&lt;DFGGGGCEGGGD:FFGGGGFFGFGGFFFFGGGFGGCFGGFGGGGG9CGCGGGG7FGGC:FFGGGGGFGG&lt;?FCGGGGGGGGGGG9CG&lt;ACC?EG5CFGGGGF8CCCC:C@FGCFGGGGGC58=EEG8??77:9@:&lt;3A&gt;7AGFGGGGC?DFC?5&lt;5&gt;&gt;BGGGFGGGGG&gt;4?C42::3:DG=&gt;&lt;&lt;*)*\n\n\n\n\n\n\nAvoid line-wrapping with less -S (Click to expand)\n\n\n\n\n\nDepending on your zoom level and the length of reads in your FASTQ file, some lines may contain too many characters to fit on your screen. If that’s the case, less will by default “wrap” those lines onto the next line on your screen, so characters won’t run off the screen on the right-hand side.\nThat may be useful when the file contains text you’re trying to read in full, but it is often confusing for files like FASTQ as well as for tabular files. That’s why we turned off line-wrapping with the -S option.\n\n\n\n\n Exercise: Explore the file with less\nless doesn’t print stuff to screen but instead opens it in a “pager”. After running the command above, you should be viewing the file inside the less pager.\nYou can move around in the file in several ways: by scrolling with your mouse, with up and down arrows, or, if you have them, PgUp and PgDn keys (also, u will move up half a page and d down half a page).\nNotice you won’t get your shell prompt back until you press q to quit less."
  },
  {
    "objectID": "03_qc-trim.html#running-fastqc",
    "href": "03_qc-trim.html#running-fastqc",
    "title": "Read QC and Trimming",
    "section": "2 Running FastQC",
    "text": "2 Running FastQC\n\n2.1 Intro to FastQC\nFastQC is a ubiquitous tools for quality control of FASTQ files. Running FastQC or a similar program is the first step in nearly any high-throughput sequencing project. FastQC is also a good introductory example of a tool with a command-line interface.\nFor each FASTQ file, FastQC outputs an HTML file that you can open in your browser with about a dozen graphs showing different QC metrics. The most important one is the per-base quality score graph shown below.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: A FastQC per-base quality score graph for files with reasonably good (left) and very poor (right) quality reads. The y-axis shows Phred quality scores (higher is better, see also the color-coding) and the x-axis shows the position along the read.\n\n\n\n\n\n\n2.2 Building our FastQC command\nTo run FastQC, we can use the command fastqc.\nIf you want to analyze one of your FASTQ files with default FastQC settings, a complete FastQC command to do so would simply be fastqc followed by the name of the file:\n# (Don't run this)\nfastqc data/fastq/NW102AB_R1.fastq.gz\nHowever, an annoying FastQC default behavior is that it writes its output files in the dir where the input files are — in general, it’s not great practice to directly mix your primary data and results like that!\nTo figure out how we can change that behavior, first consider that many commands and bioinformatics tools alike have an option -h and/or --help to print usage information to the screen. Let’s try that:\nfastqc -h\nbash: fastqc: command not found...\nHowever, there is a wrinkle: while FastQC is installed at OSC1, we have to first “load it”. The way we will do this here is with a a so-called “Conda environment” that has FastQC installed along with the other programs we will need today.\nHere’s how we can load that Conda software environment — we first load OSC’s (mini)conda installation, and then we can load (“activate”) the Conda environment that I created for you:\nmodule load miniconda3\nsource activate /fs/ess/PAS0471/jelmer/conda/mbar24\n\n\n\n\n\n\nConda and software management\n\n\n\nWe won’t have time to get into this now, but you want to learn more about Conda / software usage at supercomputers, see this reference page elsewhere on the website.\n\n\n\n Exercise: FastQC help and output dir\nAgain try to print FastQC’s help info, and figure out which option you can use to specify a custom output directory.\n\n\nClick for the solution\n\nfastqc -h and fastqc --help will both work to show the help info.\nYou’ll get quite a bit of output printed to screen, including the snippet about output directories that is reproduced below:\nfastqc -h\n  -o --outdir     Create all output files in the specified output directory.\n                    Please note that this directory must exist as the program\n                    will not create it.  If this option is not set then the \n                    output file for each sequence file is created in the same\n                    directory as the sequence file which was processed.\nSo, you can use -o or equivalently, --outdir to specify an output dir.\n\n\n\nWith the added --outdir (or -o) option, let’s try to run the following FastQC command:\n# We'll have to create the outdir ourselves, in this case\nmkdir -p results/fastqc_pretrim\n\nfastqc \\\n  --outdir results/fastqc_pretrim \\\n  data/fastq/NW102AB_R1.fastq.gz\napplication/gzip\nStarted analysis of NW102AB_R1.fastq.gz\nApprox 5% complete for NW102AB_R1.fastq.gz\nApprox 10% complete for NW102AB_R1.fastq.gz\nApprox 15% complete for NW102AB_R1.fastq.gz\n[...truncated...]\nAnalysis complete for NW102AB_R1.fastq.gz\nSuccess!! 🎉\n\n\n\n\n\n\nSpreading commands across multiple lines with \\\n\n\n\nAbove, I spread the command across multiple lines, which makes it a little easier to read. You can run the command exactly like that: we use the backslashes (\\) at the end of all but the last line to indicate to the shell that our command will continue on the next line.\n\n\n\n\n\n2.3 FastQC output files\nLet’s take a look at the files in the output dir we specified:\nls -lh results/fastqc_pretrim\ntotal 1.2M\n-rw-r--r-- 1 jelmer PAS0471 713K Feb  4 14:02 NW102AB_R1_fastqc.html\n-rw-r--r-- 1 jelmer PAS0471 431K Feb  4 14:02 NW102AB_R1_fastqc.zip\n\nThere is a .zip file, which contains tables with FastQC’s data summaries\nThere is an .html (HTML) file, which contains plots — this is what we’ll look at next\n\n\n\n Exercise: Another FastQC run\nRun FastQC for the corresponding R2 FASTQ file. Would you use the same output dir?\n\n\nClick for the solution\n\nYes, it makes sense to use the same output dir, since as you could see above, the output file names have the input file identifiers in them. As such, we don’t need to worry about overwriting files, and it will be easier to have all the results in a single dir.\nTo run FastQC for the R2 (reverse-read) file:\nfastqc \\\n  --outdir results/fastqc_pretrim \\\n  data/fastq/NW102AB_R2.fastq.gz\nStarted analysis of NW102AB_R2.fastq.gz\nApprox 5% complete for NW102AB_R2.fastq.gz\nApprox 10% complete for NW102AB_R2.fastq.gz\nApprox 15% complete for NW102AB_R2.fastq.gz\n[...truncated...]\nAnalysis complete for NW102AB_R2.fastq.gz\nls -lh results/fastqc_pretrim\n-rw-r--r-- 1 jelmer PAS0471 241K Mar 13 14:50 NW102AB_R1_fastqc.html\n-rw-r--r-- 1 jelmer PAS0471 256K Mar 13 14:50 NW102AB_R1_fastqc.zip\n-rw-r--r-- 1 jelmer PAS0471 234K Mar 13 14:53 NW102AB_R2_fastqc.html\n-rw-r--r-- 1 jelmer PAS0471 244K Mar 13 14:53 NW102AB_R2_fastqc.zip\nNow, we have four files: two for each of our preceding successful FastQC runs."
  },
  {
    "objectID": "03_qc-trim.html#interpreting-fastqc-output",
    "href": "03_qc-trim.html#interpreting-fastqc-output",
    "title": "Read QC and Trimming",
    "section": "3 Interpreting FastQC output",
    "text": "3 Interpreting FastQC output\n\n3.1 FastQC HTML modules\nWe’ll now go through a couple of the FastQC plots/modules, with first some example plots2 with good/bad results for reference.\n\nOverview of module results\nFastQC has “pass” (checkmark in green), “warning” (exclamation mark in orange), and “fail” (cross in red) assessments for each module, as you can see below.\nThese are handy and typically at least somewhat meaningful, but it is important to realize that a “warning” or a “fail” is not necessarily the bad news that it may appear to be, because, e.g.:\n\nSome of these modules could perhaps be called overly strict.\nSome warnings and fails are easily remedied or simply not a very big deal.\nFastQC assumes that your data is derived from whole-genome shotgun sequencing — some other types of data like RNA-seq data will always trigger a couple of warnings and files based on expected differences.\n\n\n\n\n\n\n\nBasic statistics\nThis shows, for example, the number of sequences (reads) and the read length range for your file:\n\n\n\n\n\n\nPer base quality sequence quality\nThis figure visualize the mean per-base quality score (y-axis) along the length of the reads (x-axis). Note that:\n\nA decrease in sequence quality along the reads is normal.\nR2 (reverse) reads are usually worse than R1 (forward) reads.\n\n\n\nGood / acceptable:\n\n\n\n\nBad:\n\n\n\n\n\nTo interpret the quality scores along the y-axis, note the color scaling in the graphs (green is good, etc.), and see this table for details:\n\n\n\nPhred quality score\nError probability\nRough interpretation\n\n\n\n\n10\n1 in 10\nterrible\n\n\n20\n1 in 100\nbad\n\n\n30\n1 in 1,000\ngood\n\n\n40\n1 in 10,000\nexcellent\n\n\n\n\n\n\nPer sequence quality scores\nThis shows the same quality scores we saw above, but now simply as a density plot of per-read averages, with the quality score now along the x-axis, and the number of reads with that quality score along the y-axis:\n\n\nGood:\n\n\n\n\nBad:\n\n\n\n\n\n\n\n\nSequence length distribution\nWill throw a warning as soon as not all sequences are of the same length (like below), but this is quite normal.\n\n\n\n\n\n\nAdapter content\nChecks for known adapter sequences. When some of the insert sizes are shorter than the read length, adapters can end up in the sequence – these should be removed!\n\n\nGood:\n\n\n\n\nBad:\n\n\n\n\n\n\n\n\n\n3.2 Checking your FastQC results\nFirst, you’ll unfortunately have to download FastQC’s output HTML files to your computer:\n\nFind the FastQC HTML files in the file explorer in the VS Code side bar.\nRight-click on one of them, click Download... and follow the prompt to download the file somewhere to your computer (doesn’t matter where).\nRepeat this for the second file\nThen, open your computer’s file browser, find the downloaded files, and double-click on one. It should be opened in your default web browser.\n\n\n Exercise: Interpreting your FastQC results\n\nOpen the HTML file for the R1 FASTQ file and go through the modules we discussed above. Can you make sense of it? Does the data look good to you, overall?\nNow open the HTML file for the R2 FASTQ file and take a look just at the quality scores. Does it look any worse than the R1?"
  },
  {
    "objectID": "03_qc-trim.html#summarizing-qc-results-with-multiqc",
    "href": "03_qc-trim.html#summarizing-qc-results-with-multiqc",
    "title": "Read QC and Trimming",
    "section": "4 Summarizing QC results with MultiQC",
    "text": "4 Summarizing QC results with MultiQC\nHere are some challenges you may run into after running FastQC:\n\nWhen you have many FASTQ files, you’ll generate a lot of FastQC HTML files to sort through. Our dataset is small with only 16 samples, but this still means 32 FastQC outputs. Other datasets may easily have dozens or even hundreds of samples, in which case checking all of the output becomes a very unpleasant task.\nEven if you do diligently go through each file, it’s not that easy to compare samples, since they are not drawn in the same graphs.\n\nMultiQC addresses these problems as it aggregates FastQC results from many files, and summarizes them into a single HTML file with (still) one graph per FastQC module.\n\n\n\n\n\n\nNot just for FastQC results!\n\n\n\nAnd while MultiQC is most widely used for FastQC aggregation, it can recognize and process the (often “log”-type) output of dozens of bioinformatics tools, including several others that we will be using.\n\n\nMultiQC’s graphs are also interactive, but here is a static example:\n\n\n\n\n\n\n\n4.1 Running MultiQC\nTo run MultiQC, use the command multiqc. Let’s start by running it with the --help option:\nmultiqc --help\n# (Only the top part of the output is shown in the screenshot below)\n\n\n\n\n\nAs the first couple of help lines in the paler gray color explain, MultiQC will search the [ANALYSIS DIRECTORY], a dir that we pass to it as an argument at the end of the command line.\nThat is, if we tell MultiQC about the results/fastqc_pretrim directory like so, it should find and then aggregate all the FastQC results in there:\n# (Don't run this - we'll complete the command in a second)\nmultiqc /fs/ess/PAS2714/share/results/fastqc_pretrim\n\n\n\n\n\n\nSince you ran FastQC on only sample, we’ll be using the FastQC results for all files that I generated for you.\n\n\n\n\n\n\nThe default output directory of MultiQC is the current working directory, so just like with FastQC, we do want to use that option as well3:\n# Run MultiQC to summarize the FastQC results\nmultiqc \\\n  --outdir results/multiqc_fastqc \\\n  /fs/ess/PAS2714/share/results/fastqc_pretrim\n\n\n\n\n\n\n\n\n4.2 MultiQC output\nThen, you should have some files in the output dir:\nls -lh results/multiqc_fastqc\ntotal 1.7M\ndrwxr-xr-x 2 jelmer PAS2250 4.0K Feb  4 14:57 multiqc_data\n-rw-r--r-- 1 jelmer PAS2250 1.7M Feb  4 14:57 multiqc_report.html\nGo ahead and find the HTML file in VS Code’s file browser, right-click on it and then download it to your computer, and click on the file in your own computer to open it in your browser (i.e., just like we did with the FastQC output).\n\n Exercise: Explore the MultiQC results\nCheck for example whether patterns are consistent across samples, or if there are any outliers."
  },
  {
    "objectID": "03_qc-trim.html#footnotes",
    "href": "03_qc-trim.html#footnotes",
    "title": "Read QC and Trimming",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor a full list of installed software at OSC: https://www.osc.edu/resources/available_software/software_list↩︎\n Attribution: Some of the FastQC example plots were taken from here.↩︎\n I will specify the dir results/multiqc_fastqc, indicating that this is a MultiQC run that summarizes FastQC output↩︎"
  },
  {
    "objectID": "02_osc.html#a-computational-infrastructure-for-genomics",
    "href": "02_osc.html#a-computational-infrastructure-for-genomics",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "1 A computational infrastructure for genomics",
    "text": "1 A computational infrastructure for genomics\nDue in large part to the amount of data involved, a laptop or desktop computer is often not sufficient to work with large-scale genomics data. Additionally, many of the specialized programs that help you analyze your data can only be run through a “command-line interface”.\nThose are some of the reasons that a typical computational infrastructure to do what we may call “command-line genomics” involves the following components:\n\nA supercomputer — in our case, the Ohio Supercomputer Center (OSC) [this session]\nA text editor — I recommend and will demonstrate VS Code [this session]\nThe Unix shell (terminal) [homework and next session]\nR1 for interactive statistical analysis and visualization [homework and Thu + Fri]\n\nWe will be using all of these components during this workshop. This session will provide an introduction to supercomputers in general and to the Ohio Supercomputer Center (OSC) specifically. In all of the lab sessions at this workshop, we’ll continue to work at OSC, so you will get a fair bit of experience with working at a supercomputer."
  },
  {
    "objectID": "02_osc.html#high-performance-computing",
    "href": "02_osc.html#high-performance-computing",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "2 High-performance computing",
    "text": "2 High-performance computing\nA supercomputer (also known as a “compute cluster” or simply a “cluster”) consists of many computers that are connected by a high-speed network, and that can be accessed remotely by its users. In more general terms, supercomputers provide high-performance computing (HPC) resources.\nThis is what Owens, one of the OSC supercomputers, physically looks like:\n\n\n\n\n\nHere are some possible reasons to use a supercomputer instead of your own laptop or desktop:\n\nYour analyses take a long time to run, need large numbers of CPUs, or a large amount of memory.\nYou need to run some analyses many times.\nYou need to store a lot of data.\nYour analyses require specialized hardware, such as GPUs (Graphical Processing Units).\nYour analyses require software available only for the Linux operating system, but you use Windows.\n\nWhen you’re working with genomics data, many of these reasons typically apply. This can make it hard or sometimes simply impossible to do all your work on your personal workstation, and supercomputers provide a solution.\n\n\nThe Ohio Supercomputer Center (OSC)\nThe Ohio Supercomputer Center (OSC) is a facility provided by the state of Ohio in the US. It has two supercomputers, lots of storage space, and an excellent infrastructure for accessing these resources.\n\n\n\n\n\n\n\nOSC websites and “Projects”\n\n\n\nOSC has three main websites — we will mostly or only use the first:\n\nhttps://ondemand.osc.edu: A web portal to use OSC resources through your browser (login needed).\nhttps://my.osc.edu: Account and project management (login needed).\nhttps://osc.edu: General website with information about the supercomputers, installed software, and usage.\n\n\nAccess to OSC’s computing power and storage space goes through OSC “Projects”:\n\nA project can be tied to a research project or lab, or be educational like this course’s project, PAS2714.\nEach project has a budget in terms of “compute hours” and storage space2.\nAs a user, it’s possible to be a member of multiple different projects."
  },
  {
    "objectID": "02_osc.html#the-structure-of-a-supercomputer-center",
    "href": "02_osc.html#the-structure-of-a-supercomputer-center",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "3 The structure of a supercomputer center",
    "text": "3 The structure of a supercomputer center\n\n3.1 Terminology\nLet’s start with some (super)computing terminology, going from smaller things to bigger things:\n\nCore / Processor / CPU / Thread\nComponents of a computer (node) that can each (semi-)indendepently be asked to perform a computing task like running a bioinformatics program. For our purposes, we can treat these terms as synonyms.\nNode\nA single computer that is a part of a supercomputer.\nSupercomputer / Cluster\nA collection of computers connected by a high-speed network. OSC has two: “Pitzer” and “Owens”.\nSupercomputer Center\nA facility like OSC that has one or more supercomputers.\n\n\n\n3.2 Supercomputer components\nWe can think of a supercomputer as having three main parts:\n\nFile Systems: Where files are stored (these are shared between the two OSC supercomputers!)\nLogin Nodes: The handful of computers everyone shares after logging in\nCompute Nodes: The many computers you can reserve to run your analyses\n\n\n\n\n\n\n\n\nFile systems\nOSC has several distinct file systems:\n\n\n\n\n\n\n\n\n\n\nFile system\nLocated within\nQuota\nBacked up?\nOne for each…\n\n\n\n\nHome\n/users/\n500 GB / 1 M files\nYes\nUser\n\n\nProject\n/fs/ess/\nFlexible\nYes\nOSC Project\n\n\nScratch\n/fs/scratch/\n100 TB\nNo\nOSC Project\n\n\n\nDuring the course, we will be working in the project directory of the course’s OSC Project PAS2714: /fs/ess/PAS2714. (We’ll talk more about these different file systems in week 5.)\n\n\n\n\n\n\nDirectory is just another word for folder, often written as “dir” for short\n\n\n\n\n\n\n\n\n\nLogin Nodes\nLogin nodes are set aside as an initial landing spot for everyone who logs in to a supercomputer. There are only a handful of them on each supercomputer, they are shared among everyone, and cannot be “reserved”.\nAs such, login nodes are meant only to do things like organizing your files and creating scripts for compute jobs, and are not meant for any serious computing, which should be done on the compute nodes.\n\n\n\nCompute Nodes\nData processing and analysis is done on compute nodes. You can only use compute nodes after putting in a request for resources (a “job”). The Slurm job scheduler, which we will learn to use in week 5, will then assign resources to your request.\n\n\n\n\n\n\nCompute node types\n\n\n\nCompute nodes come in different shapes and sizes. Standard, default nodes work fine for the vast majority of analyses, even with large-scale omics data. But you will sometimes need non-standard nodes, such as when you need a lot of RAM memory or need GPUs3.\n\n\n\n\n\n\n\n\nAt-home reading: What works differently on a supercomputer like at OSC? (Click to expand)\n\n\n\n\n\nCompared to command-line computing on a laptop or desktop, a number of aspects are different when working on a supercomputer like at OSC. We’ll learn much more about these later on in the course, but here is an overview:\n\n“Non-interactive” computing is common\nIt is common to write and “submit” scripts to a queue instead of running programs interactively.\nSoftware\nYou generally can’t install “the regular way”, and a lot of installed software needs to be “loaded”.\nOperating system\nSupercomputers run on the Linux operating system.\nLogin versus compute nodes\nAs mentioned, the nodes you end up on after logging in are not meant for heavy computing and you have to request access to “compute nodes” to run most analyses."
  },
  {
    "objectID": "02_osc.html#osc-ondemand",
    "href": "02_osc.html#osc-ondemand",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "4 OSC OnDemand",
    "text": "4 OSC OnDemand\nThe OSC OnDemand web portal allows you to use a web browser to access OSC resources such as:\n\nA file browser where you can also create and rename folders and files, etc.\nA Unix shell\n“Interactive Apps”: programs such as RStudio, Jupyter, VS Code and QGIS.\n\n Go to https://ondemand.osc.edu and log in (use the boxes on the left-hand side)\nYou should see a landing page similar to the one below:\n\n\n\nWe will now go through some of the dropdown menus in the blue bar along the top.\n\n\n4.1 Files: File system access\nHovering over the Files dropdown menu gives a list of directories that you have access to. If your account is brand new, and you were added to PAS2714, you should only have three directories listed:\n\nA Home directory (starts with /users/)\nThe PAS2714 project’s “scratch” directory (/fs/scratch/PAS2714)\nThe PAS2714 project’s “project” directory (/fs/ess/PAS2714)\n\nYou will only ever have one Home directory at OSC, but for every additional project you are a member of, you should usually see additional /fs/ess and /fs/scratch directories appear.\n In the Files dropdown menu, click on our focal directory /fs/ess/PAS2714.\nOnce there, you should see whichever directories and files are present at the selected location, and you can click on the directories to explore the contents further:\n\n\n\n\n\nThis interface is much like the file browser on your own computer, so you can also create, delete, move and copy files and folders, and even upload (from your computer to OSC) and download (from OSC your computer) files4 — see the buttons across the top.\n\n\n\n\n\n\nDidn’t create your own dir in the Unix shell homework? Click here and follow these instructions to do it now.\n\n\n\n\n\n\nClick on the users dir in /fs/ess/PAS714.\nCreate your own dir by clicking the New Directory button towards the top.\nPlease give it the exact same name as your OSC username (also match the capitalization!).\n\n(If you’re not sure what your username is — look at the right side of the blue top bar, “Logged in as”:)\n\n\n\n\n\n\n\n\n\n\n\n4.2 Clusters: Unix shell access\n\n\n\n\n\n\nSystem Status within Clusters (Click to expand)\n\n\n\n\n\nIn the “Clusters” dropdown menu, click on the item at the bottom, “System Status”:\n\n\n\n\n\nThis page shows an overview of the live, current usage of the two clusters — that can be interesting to get a good idea of the scale of the supercomputer center, which cluster is being used more, what the size of the “queue” (which has jobs waiting to start) is, and so on.\n\n\n\n\n\n\n\n\nInteracting with a supercomputer is most commonly done using a Unix shell. Under the Clusters dropdown menu, you can access a Unix shell either on Owens or Pitzer:\n\n\n\n\n\nI’m selecting a shell on the Pitzer supercomputer (“Pitzer Shell Access”), which will open a new browser tab, where the bottom of the page looks like this:\n\n\n\n\n\nHowever, from now on, we’ll be accessing a Unix shell inside the VS Code text editor, which also gives us some additional functionality in a user-friendly way.\n\n\n\n4.3 Interactive Apps\nWe can access programs with Graphical User Interfaces (GUIs; point-and-click interfaces) via the Interactive Apps dropdown menu — let’s select VS Code using the “Code Server” button:\n\n\n\n\n\nInteractive Apps like VS Code and RStudio run on compute nodes (not login nodes). Because compute nodes always need to be “reserved”, we have to fill out a form and specify the following details:\n\n\n\n\n\n\n\nOption\nValue\n\n\n\n\nThe OSC Project to be billed for the compute resource usage\nPAS2714\n\n\nThe Number of hours we want to make a reservation for5\n3\n\n\nThe Working Directory6 for the program\nYour personal folder in /fs/ess/PAS2714 (e.g. /fs/ess/PAS2714/jelmer)\n\n\nThe Codeserver Version\n4.8\n\n\n\n\n\n\n\n\nClick on Launch at the bottom, which will send your request to the “compute job” scheduler.\nFirst, your job will be “Queued” — that is, waiting for the job scheduler to allocate compute node resources to it:\n\n\n\n\n\nYour job is typically granted resources within a few seconds (the card will then say “Starting”), and should be ready for usage (“Running”) in another couple of seconds:\n\n\n\n\n\nOnce it appears, click on the blue Connect to VS Code button to open VS Code in a new browser tab.\nWhen VS Code opens, you may get these two pop-ups (and possibly some others) — click “Yes” (and check the box) and “Don’t Show Again”, respectively:"
  },
  {
    "objectID": "02_osc.html#vs-code",
    "href": "02_osc.html#vs-code",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "5 VS Code",
    "text": "5 VS Code\n\n5.1 What is VS Code?\nVS Code is basically a fancy text editor. Its full name is Visual Studio Code, but at OSC, it is also referred to as “Code Server”.\nTo emphasize the additional functionality relative to basic text editors like Notepad and TextEdit, editors like VS Code are also referred to as “IDEs”: Integrated Development Environments. The RStudio program is another good example of an IDE. For our purposes:\n\nVS code will be our IDE for Unix shell code\nRStudio will be our IDE for R\n\n\n\n\n5.2 The VS Code User Interface\n\n\n\n\n\n\nSide bars\nThe Activity Bar (narrow side bar) on the far left has:\n\nA  (“hamburger menu”), which has menu items like File that you often find in a top bar.\nA  (cog wheel icon) in the bottom, through which you can mainly access settings.\nIcons to toggle (wide) Side Bar options — but we’ll only use the default selection, the Explorer (file browser)\n\n\n\nEditor pane and Welcome document\nThe main part of the VS Code is the editor pane. Here, we can open files like scripts and other types of text files, and images. (Whenever you open VS Code, an editor tab with a Welcome document is automatically opened. This provides some help and some shortcuts like to recently opened files and folders.)\n\n\nTerminal (with a Unix shell)\n Open a terminal by clicking      =&gt; Terminal =&gt; New Terminal.\n\n\n\n Exercise: Try a few color themes\n\nAccess the “Color Themes” option by clicking  =&gt; Color Theme.\nTry out a few themes and see pick one you like!"
  },
  {
    "objectID": "02_osc.html#a-folder-as-a-starting-point",
    "href": "02_osc.html#a-folder-as-a-starting-point",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "6 A folder as a starting point",
    "text": "6 A folder as a starting point\nConveniently, VS Code takes a specific directory as a starting point in all parts of the program:\n\nIn the file explorer in the side bar\nIn the terminal\nWhen saving files in the editor pane.\n\n(If you need to switch folders, click      =&gt;   File   =&gt;   Open Folder.)\n\n\n\n\n\n\n\nSome VS Code tips and tricks\n\n\n\n\nResizing panes\nYou can resize panes (the terminal, editor, and side bar) by hovering your cursor over the borders and then dragging.\nThe Command Palette\nTo access all the menu options that are available in VS Code, the so-called “Command Palette” can be handy, especially if you know what you are looking for. To access the Command Palette, click      and then Command Palette (or press F1 or Ctrl/⌘+Shift+P).\nKeyboard shortcuts\nFor a single-page PDF overview of keyboard shortcuts for your operating system:      =&gt;   Help   =&gt;   Keyboard Shortcut Reference. (Or for direct links to these PDFs: Windows / Mac / Linux.) A couple of useful keyboard shortcuts are highlighted below.\n\n\n\n\n\n\n\n\n\nSpecific useful keyboard shortcuts (Click to expand)\n\n\n\n\n\nWorking with keyboard shortcuts for common operations can be a lot faster than using your mouse. Below are some useful ones for VS Code (for Mac, in some case, you’ll have to replace Ctrl with ⌘):\n\nOpen a terminal: Ctrl+` (backtick) or Ctrl+Shift+C.\nToggle between the terminal and the editor pane: Ctrl+` and Ctrl+1.\nToggle the (wide) Side Bar: Ctrl+B\nLine actions:\n\nCtrl+X / C will cut/copy the entire line where the cursor is, when nothing is selected (!)\nCtrl+Shift+K will delete a line\nAlt+⬆/⬇ will move lines up or down."
  },
  {
    "objectID": "02_osc.html#further-reading",
    "href": "02_osc.html#further-reading",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "Further reading",
    "text": "Further reading\n\nOSC’s learning resources\n\nAn extended version of this introduction\nOSC’s online asynchronous courses\nOSC’s new User Resource Guide7"
  },
  {
    "objectID": "02_osc.html#footnotes",
    "href": "02_osc.html#footnotes",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOr Python↩︎\nBut we don’t have to pay anything for educational projects like this one. Otherwise, for OSC’s rates for academic research, see this page.↩︎\nGPUs are e.g. used for Nanopore basecalling↩︎\nThough this is not meant for large (&gt;1 GB) transfers. Different methods are available — we’ll talk about those later on.↩︎\nNote that we’ll be kicked off as soon as that amount of time has passed!↩︎\nThis will be your starting location in the file system; we’ll talk more about working dirs in a little bit.↩︎\n Attribution: This page uses material from an OSC Introduction written by Mike Sovic and from OSC’s Kate Cahill Software Carpentry introduction to OSC.↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the website for an Ohio State University workshop on Amplicon Metabarcoding, held from March 13-15, 2024 in Wooster, Ohio.\nThis workshop is co-organized by:\n\nDr. Soledad Benitez-Ponce, Dept. of Plant Pathology\nDr. Timothy Frey, Dept. of Plant Pathology\nDr. Jelmer Poelstra, Molecular and Cellular Imaging Center (MCIC)\nFiama Guevara, Dept. of Plant Pathology\nMelanie Medina Lopez, Dept. of Plant Pathology\n\n\n\n\n Back to top"
  },
  {
    "objectID": "homework/shell.html#why-the-unix-shell",
    "href": "homework/shell.html#why-the-unix-shell",
    "title": "Homework: Intro to the Unix Shell",
    "section": "1 Why the Unix shell?",
    "text": "1 Why the Unix shell?\nMany of the things you typically do by pointing and clicking can alternatively be done by typing commands. The Unix shell allows you to interact with computers via commands.\nHere are some reasons why you may want to use this seemingly archaic technique:\n\nWorking efficiently with large files\nMaking it easier to repeat (& automate) similar tasks across files, samples, and projects\nAchieving better reproducibility in research\nAt least in bioinformatics, being able to use access the largest and most recent set of approaches and all their options — many graphical user interface programs lag behind in functionality and may cost money as well.\nWorking effectively on a remote supercomputer like the Ohio Supercomputer Center (OSC)\n\n\n\n\n\n\n\nSide note: Some Unix shell terminology (Click to expand)\n\n\n\n\n\nHere are a few interrelated terms you’re likely to run across:\n\nCommand Line — the most general term, an interface1 where you type commands\nTerminal — the program/app/window that can run a Unix shell\nShell — a command line interface to your computer\nUnix Shell — the types of shells on Unix family (Linux + Mac) computers\nBash — the specific Unix shell language that is most common on Unix computers\n\nWhile you’ve seen that these are not all synonyms, in day-to-day computing/bioinformatics, they are often used interchangeably."
  },
  {
    "objectID": "homework/shell.html#how-to-go-through-this-page",
    "href": "homework/shell.html#how-to-go-through-this-page",
    "title": "Homework: Intro to the Unix Shell",
    "section": "2 How to go through this page",
    "text": "2 How to go through this page\nYou will be using a Unix shell at the Ohio Supercomputer Center (OSC) — see the instructions below to open one.\nPlease follow along actively by typing all the commands shown below (unless it explicitly says you shouldn’t run something), not just the exercises.\n\n2.1 Opening a Unix shell at OSC\n\nLog in to OSC’s OnDemand portal at https://ondemand.osc.edu.\nIn the blue top bar, click on the “Clusters” dropdown menu and then click Pitzer Shell Access.\nA Unix shell will open in a new browser tab (see screenshot below). You’re ready to go!\n\n\n\n\n\n\n\n\n\nCopying and pasting in this shell\n\n\n\nYou can’t right-click in this shell, so to copy-and-paste:\n\nCopy simply by selecting text (you should see a  icon appear).\nPaste using Ctrl+V.\n\n Try copying and pasting a random word into your shell. This may just work, you may get a permission pop-up, or it may silently fail — if the latter, click on the clipboard icon in your browser’s address bar (see red circle in screenshot below):"
  },
  {
    "objectID": "homework/shell.html#the-basics",
    "href": "homework/shell.html#the-basics",
    "title": "Homework: Intro to the Unix Shell",
    "section": "3 The basics",
    "text": "3 The basics\n\n3.1 The prompt\nInside your terminal, the “prompt” indicates that the shell is ready for a command. What is shown exactly varies across shells and can also be customized, but our prompts at OSC should show the following information:\n&lt;username&gt;@&lt;node-name&gt; &lt;working-directory&gt;]$\nFor example (and _note that ~ means your Home directory/folder):\n[jelmer@pitzer-login02 ~]$ \nWe type our commands after the dollar sign, and then press Enter to execute the command. When the command has finished executing, we’ll get our prompt back and can type a new command.\n\n\n\n\n\n\n“Directory” (or “dir”) for short is Unix-speak for “folder”\n\n\n\n\n\n\n\n\n\n3.2 A few simple commands: date, whoami, pwd\nThe Unix shell comes with hundreds of “commands”: small programs that perform specific actions. If you’re familiar with R or Python, a Unix command is like an R/Python function.\nLet’s start with a few simple commands:\n\nThe date command prints the current date and time:\n\ndate\nTue Mar 5 09:11:51 EST 2024\n\nThe whoami (who-am-i) command prints your username:\n\nwhoami\njelmer\n\nThe pwd (Print Working Directory) command prints the path to the directory you are currently located in:\n\npwd\n/users/PAS0471/jelmer\n# [Yours will be different! You are in your Home directory.]\nAll 3 of those commands provided us with some output. That output was printed to screen, which is the default behavior for nearly every Unix command.\n\n\n\n\n\n\nWorking directory and paths (we’ll talk more about paths later)\n\n\n\n\nWhen working in a Unix shell, you are always “in” a specific directory: your working directory (“working dir” for short).\nIn a path (= location of a file or directory) such as that output by pwd, directories are separated by forward slashes /.\n\n\n\n\n\n\n\n\n\nCase and spaces\n\n\n\n\nEverything in the shell is case-sensitive, including commands and file names.\nAvoid spaces in file and directory names!2 Use e.g. underscores to distinguish words (my_long_filename).\n\n\n\n\n\n\n3.3 cd and command actions & arguments\nIn the above three command line expressions:\n\nWe merely typed a command and nothing else\nThe command provided some information, which was printed to screen\n\nBut many commands perform an action other than providing information. For example, you can use the command cd to Change Directory (i.e. change your working dir). And like many commands that perform an action, cd normally has no output at all.\nLet’s use cd to move to another directory by specifying the path to that directory after the cd command:\ncd /fs/ess/PAS2714\npwd\n/fs/ess/PAS2714\nIn more abstract terms, what we did above was to provide cd with an argument, namely the path of the dir to move to. Arguments generally tell commands what file(s) or directory/ies to operate on.\nAs we’ve seen, then, cd gives no output when it successfully changed the working directory. But let’s also see what happens when it does not succeed — it gives an error:\ncd /fs/ess/PAs2714\nbash: cd: /fs/ess/PAs2714: No such file or directory\n\n\nWhat was the problem with the path we specified? (Click to see the answer)\n\nWe used lowercase in /PAs2714/ — this should have been /PAS2714/.\nAs pointed out above, everything, including paths, is case-sensitive in the Unix shell!\n\n\n\n\n3.4 ls and command options\n\nThe default behavior of ls\nThe ls command, short for “list”, will list files and directories:\nls\nsandbox   share   users\n(You should still be in /fs/ess/PAS2714. If not, cd there first.)\n\n\n\n\n\n\nSide note: ls output colors (click to expand)\n\n\n\n\n\nThe ls output above does not show the different colors you should see in your shell — the most common ones are:\n\nEntries in blue are directories (like data and metadata above)\nEntries in black are regular files (like README.md above)\nEntries in red are compressed files (we’ll see an example soon).\n\n\n\n\nBy default, ls will list files and dirs in your current working dir, and in the way shown above. For which dir ls lists files and dirs can be changed with arguments, and how ls shows the output can be changed with options.\n\n\n\nOptions\nIn general, whereas arguments tell a command what to operate on, options will modify its behavior. For example, we can call ls with the option -l (a dash followed by a lowercase L):\nls -l \ntotal 2\ndrwxr-xr-x+ 2 jelmer PAS0471 4096 Mar  1 16:23 sandbox\ndrwxr-xr-x+ 4 jelmer PAS0471 4096 Mar  1 16:13 share\ndrwxrwxrwx+ 3 jelmer PAS0471 4096 Mar  1 16:19 users\nNotice that it lists the same items as above, but printed in a different format: one item per line, with additional information such as the date and time each file was last modified, and file sizes in bytes (to the left of the date).\nLet’s add another option, -h:\nls -l -h\ntotal 1.5K\ndrwxr-xr-x+ 2 jelmer PAS0471 4.0K Mar  1 16:23 sandbox\ndrwxr-xr-x+ 4 jelmer PAS0471 4.0K Mar  1 16:13 share\ndrwxrwxrwx+ 3 jelmer PAS0471 4.0K Mar  1 16:19 users\n\n\nWhat is different about the output, and what do you think that means? (Click to see the answer)\n\nThe only difference is in the format of the column reporting the sizes of the items listed.\nWe now have “Human-readable filesizes” (hence -h), where sizes on the scale of kilobytes will be shown with Ks, of megabytes with Ms, and of gigabytes with Gs. That can be really useful especially for very large files.\n\nConveniently, options can be “pasted together” as follows:\nls -lh\n\n\n\nArguments\nArguments to ls should be dirs or files to operate on. For example, if we wanted to see what’s inside the share dir, instead of inside our working dir, we could type3:\nls share\ndata  README.md  results\n\n\nIntermezzo: cat and a quick intro to the data\nTo find out what data is contained in this dir, let’s take a look at the README.md file.\nThere are several commands to view the contents of files — the simplest is cat, which will print the entire contents of a file to screen:\ncat share/README.md\nThis 16S amplicon metabarcoding data set compares soil bacterial populations\nunder two different rotational schemes (corn-soy) vs (corn-soy-wheat) at\ntwo research farms in Ohio (Northwest Agricultural Research Station(NW) and Western Agricultural Research Station (W)).\nThere are 32 plots (Ex: 102A) in four blocks (100-400).\nPlots were split into A and BC plots to include a cover crop treatment.\nThis is some information about the data set we will work with during the workshop.\n\n\nLet’s dig a little deeper and check the share/data dir:\nls share/data\nfastq  meta  ref\nThe data dir appears to contain three (sub)dirs with different kinds of data. We’ll talk in detail about that later, but for now let’s look inside the fastq dir:\nls share/data/fastq\nNW102AB_R1.fastq.gz  NW201C_R1.fastq.gz   NW305AB_R1.fastq.gz  NW404BC_R1.fastq.gz  W204A_R1.fastq.gz   W303C_R1.fastq.gz   W404A_R1.fastq.gz\nNW102AB_R2.fastq.gz  NW201C_R2.fastq.gz   NW305AB_R2.fastq.gz  NW404BC_R2.fastq.gz  W204A_R2.fastq.gz   W303C_R2.fastq.gz   W404A_R2.fastq.gz\nNW102C_R1.fastq.gz   NW203A_R1.fastq.gz   NW305C_R1.fastq.gz   W101AB_R1.fastq.gz   W204BC_R1.fastq.gz  W304AB_R1.fastq.gz  W404BC_R1.fastq.gz\nNW102C_R2.fastq.gz   NW203A_R2.fastq.gz   NW305C_R2.fastq.gz   W101AB_R2.fastq.gz   W204BC_R2.fastq.gz  W304AB_R2.fastq.gz  W404BC_R2.fastq.gz\nNW103AB_R1.fastq.gz  NW203BC_R1.fastq.gz  NW403A_R1.fastq.gz   W101C_R1.fastq.gz    W205A_R1.fastq.gz   W304C_R1.fastq.gz\nNW103AB_R2.fastq.gz  NW203BC_R2.fastq.gz  NW403A_R2.fastq.gz   W101C_R2.fastq.gz    W205A_R2.fastq.gz   W304C_R2.fastq.gz\nNW103C_R1.fastq.gz   NW304A_R1.fastq.gz   NW403BC_R1.fastq.gz  W103AB_R1.fastq.gz   W205BC_R1.fastq.gz  W403AB_R1.fastq.gz\nNW103C_R2.fastq.gz   NW304A_R2.fastq.gz   NW403BC_R2.fastq.gz  W103AB_R2.fastq.gz   W205BC_R2.fastq.gz  W403AB_R2.fastq.gz\nNW201AB_R1.fastq.gz  NW304BC_R1.fastq.gz  NW404A_R1.fastq.gz   W103C_R1.fastq.gz    W303AB_R1.fastq.gz  W403C_R1.fastq.gz\nNW201AB_R2.fastq.gz  NW304BC_R2.fastq.gz  NW404A_R2.fastq.gz   W103C_R2.fastq.gz    W303AB_R2.fastq.gz  W403C_R2.fastq.gz\nAh, FASTQ files! These contain our sequence data (the reads from the Illumina sequencer), and we’ll go and explore them in a bit.\n\n\nCombining options and arguments\nWe’ll combine options and arguments to take a closer look at our dir with FASTQ files — now the -h option is especially useful and allows us to see that the FASTQ files are around 2-3 Mb in size:\nls -lh share/data/fastq\ntotal 150M\n-rw-r-----+ 1 jelmer PAS0471 2.0M Mar  1 11:24 NW102AB_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.6M Mar  1 11:24 NW102AB_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.3M Mar  1 11:24 NW102C_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 3.0M Mar  1 11:24 NW102C_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 1.9M Mar  1 11:24 NW103AB_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.6M Mar  1 11:24 NW103AB_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.3M Mar  1 11:24 NW103C_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 3.1M Mar  1 11:24 NW103C_R2.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 1.9M Mar  1 11:24 NW201AB_R1.fastq.gz\n-rw-r-----+ 1 jelmer PAS0471 2.5M Mar  1 11:24 NW201AB_R2.fastq.gz\n# [...output truncated...]\n\n\n\n\n\n\nWhy so small?\n\n\n\nThe FASTQ files are so small because we’ve “subsampled” them: these only contain 10% of the reads of the original files. This will allow us to do the demonstrational analyses in the workshops more rapidly.\n\n\n\n\n\n Exercise: Listing files\nList the files in the share/data/ref dir:\n\nWhat is the file size?\nDo you know what kind of file this is?\n\n\n\nClick for the solution\n\nls -lh share/data/ref\ntotal 131M\n-rwxr--r-- 1 jelmer PAS2714 131M Feb 27 11:53 silva_nr99_v138.1_train_set.fa.gz\n\nThe file is 131 Mb large.\nThis is a FASTA file with nucleotide sequences (hence the extension .fa), which has been compressed (hence the extension .gz).\n\n\n\n\n\n\n3.5 Miscellaneous tips\n\nCommand history: If you hit the ⇧ (up arrow) once, you’ll retrieve your most recent command, and if you keep hitting it, you’ll go further back. The ⇩ (down arrow) will go the other way: towards the present.\nYour cursor can be anywhere on a line (not just at the end) when you press Enter to execute a command!\nTab completion: file paths can Tab-complete! Try to type a partial path and test it. If you’re not getting it to work, it might be worth Googling this feature and watching a demo video.\nAny text that comes after a # is considered a comment instead of code!\n# This entire line is a comment - you can run it and nothing will happen\npwd    # 'pwd' will be executed but everything after the '#' is ignored\n/fs/ess/PAS2714/data\n\n\n\nIf your prompt is “missing”, the shell is still busy executing your command, or you typed an incomplete command. To abort in either of these scenarios, press Ctrl+C and you will get your prompt back.\nTo simulate a long-running command that we may want to abort, we can use the sleep command, which will make the computer wait for a specified amount of time until giving your prompt back. Run the below command and instead of waiting for the full 60 seconds, press Ctrl + C to get your prompt back sooner!\nsleep 60s\nOr, use Ctrl + C after running this example of an incomplete command (an opening parenthesis ():\n("
  },
  {
    "objectID": "homework/shell.html#paths-and-environment-variables",
    "href": "homework/shell.html#paths-and-environment-variables",
    "title": "Homework: Intro to the Unix Shell",
    "section": "4 Paths and environment variables",
    "text": "4 Paths and environment variables\n\n4.1 Paths\n\nAbsolute (full) paths versus relative paths\n\nAbsolute (full) paths (e.g. /fs/ess/PAS2714)\nPaths that begin with a / always start from the computer’s root directory, and are called “absolute paths”.\n(They are equivalent to GPS coordinates for a geographical location, as they work regardless of where you are).\nRelative paths (e.g. data/fastq)\nPaths that instead start from your current working directory are called “relative paths”.\n(These work like directions along the lines of “take the second left:” they depend on your current location.)\n\n# Move into the 'PAS2714' dir with an absolute path:\ncd /fs/ess/PAS2714\n\n# Then, move into the 'share/data' dir with a relative path:\ncd share/data                   # Absolute path is /fs/ess/PAS2714/share/data\n\n\nPath shortcuts\n\n~ (a tilde) — represents your Home directory. For example, cd ~ moves you to your Home dir.\n. (a single period) — represents the current working directory.\n.. (two periods) — Represents the directory “one level up”, i.e. towards the computer’s root dir.\n\nls ..              # One level up, listing /fs/ess/PAS2714/share\ndata  README.md  results\nThis pattern can be continued all the way to the root of the computer, so ../.. means two levels up:\nls ../..            # Two levels up, listing /fs/ess/PAS2714\nsandbox  share  users\n\n\n\n\n\n\nThese shortcuts work with all commands\n\n\n\nAll of the above shortcuts (., .., ~) are general shell shortcuts that work with any command that accepts a path/file name.\n\n\n\n\n\n Exercise: Path shortcuts\n\nA) Use relative paths to move up to /fs/ess/PAS2714 and back to share/data once again.\n\n\n\n(Click for the solution)\n\ncd ../..\ncd share/data\n\n\nB) List the files in your Home dir without moving there.\n\n\n\n(Click for the solution)\n\nls ~\n\n\n\n\n\n4.2 Environment variables\nYou are likely familiar with the concept of variables in either the Unix shell, R, or another language.\n\nAssigning and printing the value of a variable in R:\n\n# (Don't run this)\nx &lt;- 5\nx\n\n[1] 5\n\n\nAssigning and printing the value of a variable in the Unix shell:\nx=5\necho $x\n5\n\n\n\n\n\n\n\nIn the Unix shell code above, note that:\n\n\n\n\nThere cannot be any spaces around the = in x=5.\nYou need a $ prefix to reference (but not to assign) variables in the shell4.\nYou need the echo command, a general command to print text, to print the value of $x (cf. in R).\n\nBy the way, echo can also print literal text (as shown below) or combinations of literals and variables (next exercise):\necho \"Welcome to the Unix shell\"\nWelcome to the Unix shell\n\n\n\nEnvironment variables are pre-existing variables that have been assigned values automatically. Two examples:\n# $HOME contains the path to your Home dir:\necho $HOME\n/users/PAS0471/jelmer\n# $USER contains your user name:\necho $USER\njelmer\n\n Exercise: environment variables\nB) Print “Hello there, &lt;your username&gt;” (e.g. “Hello there, marcus”) to the screen:\n\n\nClick to see the solution\n\n# (This would also work without the \" \" quotes)\necho \"Hello there $USER\"\nHello there jelmer"
  },
  {
    "objectID": "homework/shell.html#managing-files-and-dirs",
    "href": "homework/shell.html#managing-files-and-dirs",
    "title": "Homework: Intro to the Unix Shell",
    "section": "5 Managing files and dirs",
    "text": "5 Managing files and dirs\n\n5.1 Create dirs with mkdir\nThe mkdir command creates new directories. For example, to create your own dir within /fs/ess/PAS2714:\ncd /fs/ess/PAS2714/users\n\nmkdir $USER\nLet’s move into our newly created dir and create two directories at once:\ncd $USER\n\nmkdir scripts sandbox\nLet’s check what we did:\nls\nsandbox  scripts\n\n\n\n\n\n\n\nConfused by $USER?\n\n\n\nInstead of $USER, you can also type your literal username. If you do that, make sure that you get your username exactly right, including any capitalization.\nFor example, I (username jelmer) could have run the following commands instead of the ones above:\nmkdir jelmer\ncd jelmer\n\n\n\n\n\n\n\n\nSide note: Recursive mkdir (Click to expand)\n\n\n\n\n\nBy default, mkdir does not work recursively: that is, it will refuse to make a dir inside a dir that does not yet exist. And if you try to do so, the resulting error might confuse you:\nmkdir sandbox/2024/02/07\nmkdir: cannot create directory ‘sandbox/2024/02/07’: No such file or directory\n\nWhy won’t you do your job, mkdir!? 😡\n\nInstead, we need to use the -p option to mkdir:\nmkdir -p sandbox/2024/02/07\nThe -p option also changes mkdir’s behavior when you try to create a dir that already exists. Without -p that will result in an error, and with -p it doesn’t complain about that (and it won’t recreate/overwrite the dir either).\n\n\n\n\n\n\n5.2 Copy files and dirs with cp\nAbove, you created your own directory — now, let’s get you a copy of the data we saw in the data dir.\nThe cp command copies files and/or directories from one location to another. It has two required arguments: what you want to copy (the source), and where you want to copy it to (the destination). So, we can summarize its basic syntax as cp &lt;source&gt; &lt;destination&gt;.\nLet’s start by copying a single file twice:\n# You should be in /fs/ess/PAS2714/users/$USER/\n\n# Only provide a dir as the destination =&gt; Don't change the file name:\ncp /fs/ess/PAS2714/sandbox/testfile.txt sandbox/\n\n# Provide a file name as the destination =&gt; Give the copy a new name:\ncp /fs/ess/PAS2714/sandbox/testfile.txt sandbox/testfile_mycopy.txt\n\n# Check the files we created:\nls sandbox\ntestfile_mycopy.txt  testfile.txt\n\ncp is not recursive by default, so if you want to copy a directory and all of its contents, you need to use its -r option. We’ll use that option to copy the dir with FASTQ files:\ncp -rv /fs/ess/PAS2714/share/data /fs/ess/PAS2714/users/$USER/\n‘/fs/ess/PAS2714/share/data’ -&gt; ‘./data’\n‘/fs/ess/PAS2714/share/data/meta’ -&gt; ‘./data/meta’\n‘/fs/ess/PAS2714/share/data/meta/meta.tsv’ -&gt; ‘./data/meta/meta.tsv’\n‘/fs/ess/PAS2714/share/data/ref’ -&gt; ‘./data/ref’\n‘/fs/ess/PAS2714/share/data/ref/silva_nr99_v138.1_train_set.fa.gz’ -&gt; ‘./data/ref/silva_nr99_v138.1_train_set.fa.gz’\n‘/fs/ess/PAS2714/share/data/fastq’ -&gt; ‘./data/fastq’\n‘/fs/ess/PAS2714/share/data/fastq/W404A_R2.fastq.gz’ -&gt; ‘./data/fastq/W404A_R2.fastq.gz’\n‘/fs/ess/PAS2714/share/data/fastq/NW203A_R2.fastq.gz’ -&gt; ‘./data/fastq/NW203A_R2.fastq.gz’\n‘/fs/ess/PAS2714/share/data/fastq/W205BC_R2.fastq.gz’ -&gt; ‘./data/fastq/W205BC_R2.fastq.gz’\n# [...output truncated...]\n\n\n\n\n\n\nAbove we also used the -v option, short for verbose, to make cp tell us what it did\n\n\n\n\n\n\nWe can also get a nice recursive overview of all our files with tree:\ntree -C                 # '-C' for colors, not visible on this site though\n.\n├── data\n│   ├── fastq\n│   │   ├── NW102AB_R1.fastq.gz\n│   │   ├── NW102AB_R2.fastq.gz\n│   │   ├── NW102C_R1.fastq.gz\n│   │   ├── NW102C_R2.fastq.gz\n│   │   ├── NW103AB_R1.fastq.gz\n│   │   ├── NW103AB_R2.fastq.gz\n        ├── [...Other FASTQ files not shown...]\n│   ├── meta\n│   │   └── meta.tsv\n│   └── ref\n│       └── silva_nr99_v138.1_train_set.fa.gz\n├── sandbox\n│   ├── testfile_mycopy.txt\n│   └── testfile.txt\n└── scripts\n\n\n\n5.3 Move with mv, and cp/mv tips\nThe mv command is nearly identical to the cp command, except that it:\n\nMoves rather than copies files and/or dirs\nWorks recursively by default\n\nThere is no separate command for renaming, because both cp and mv allow you to provide a different name for the target.\nLet’s start by moving the testfile.txt into our current working dir:\nmv sandbox/testfile.txt .\nAnd we can move and rename at the same time as well — let’s do that to move testfile.txt back and give it a new name at once:\nmv testfile.txt sandbox/testfile_v2.txt\n\n\n\n\n\n\nOverwriting\n\n\n\nBy default, both mv and cp will overwrite files without warning! Use the -i (forinteractive) option to make it let you confirm before overwriting anything.\n\n\n\n\n\n\n\n\nRenaming rules for both cp and mv — if the destination is:\n\n\n\n\nAn existing dir, the file(s) will keep their original names.\nNot an existing dir, the path specifies the new name of the file or dir, depending on what the source is.\n\n\n\n\nExercise: Practice with mv\nIn which directory (in terms of a relative path from your working dir) would the FASTQ files end up with each of the following commands?\n\nmv data/fastq data/fastq_files\nmv data/fastq fastq\nmv data/fastq .\n\nWhat if you wanted to move the FASTQ files directly into your current working directory (from data/fastq)?\n\n\n\nSolutions (click here)\n\nIn which directory (in terms of relative path from your working dir) will the FASTQ files end up with each of the following commands?\n\nmv data/fastq data/fastq_files — in the dir fastq_files (we’ve really just renamed the dir fastq to fastq_files)\nmv data/fastq fastq — in fastq (because our source is a dir, so is the destination)\nmv data/fastq . — in fastq also! (we’d need the syntax shown below to move the individual files directly into our current dir)\n\nWhat if you wanted to move the FASTQ files directly into your current working directory?\nFor one file:\nmv data/fastq/ASPC1_A178V_R1.fastq.gz .\nFor all files:\nmv data/fastq/* .\n\n\n\n\n\n5.4 Remove files with rm\nThe rm command removes (deletes) files and directories.\nOne important thing to note upfront is that rm will permanently and irreversibly delete files without the typical “intermediate step” of placing them in a trash bin, like you are used to with your personal computer. With a healthy dosis of fear installed, let’s dive in.\nTo remove one or more files, you can simply pass the file names as arguments to rm as with previous commands. We will also use the -v (verbose) option to have it tell us what it did:\nrm -v sandbox/testfile_v2.txt\nremoved sandbox/testfile_v2.txt\n\n\nRecursive rm\nAs a safety measure, rm will by default only delete files and not directories or their contents — i.e., like mkdir and cp, it refuses to act recursively by default. To remove dirs and their contents, use the -r option:\n# First we create 3 levels of dirs - we need `-p` to make mkdir work recursively:\nmkdir -p d1/d2/d3\n\n# Then we try to remove the d1 dir - which fails:\nrm d1\nrm: cannot remove ‘d1’: Is a directory\n# But it does work with the '-r' option:\nrm -rv d1\nremoved directory: ‘d1/d2/d3’\nremoved directory: ‘d1/d2’\nremoved directory: ‘d1’\nYou should obviously be quite careful with rm -r!\n\n\n\n\n\n\nThere is no thrash bin when deleting files in the shell, so use rm with caution! (Click to expand)\n\n\n\n\n\nrm -r can be very dangerous — for example rm -r / would at least attempt to remove the entire contents of the computer, including the operating system.\nA couple ways to take precautions:\n\nYou can add the -i option, which will have you confirm each individual removal (can be tedious)\nWhen you intend to remove an empty dir, you can use the rmdir command which will do just (and only) that — that way, if the dir isn’t empty after all, you’ll get an error."
  },
  {
    "objectID": "homework/shell.html#globbing-and-loops",
    "href": "homework/shell.html#globbing-and-loops",
    "title": "Homework: Intro to the Unix Shell",
    "section": "6 Globbing and loops",
    "text": "6 Globbing and loops\n\n6.1 Globbing with shell wildcard expansion\nShell wildcard expansion is a very useful technique to select files. Selecting files with wildcard expansion is called globbing. Wildcards are symbols that have a special meaning.\nIn globbing, the * wildcard matches any number of any character, including nothing.\nThe example below will match any files that contain the string “_R1”:\n# (You should still be in /fs/ess/PAS2714/users/$USER)\nls data/fastq/*_R1*\ndata/fastq/NW102AB_R1.fastq.gz  data/fastq/NW201C_R1.fastq.gz   data/fastq/NW305AB_R1.fastq.gz  data/fastq/NW404BC_R1.fastq.gz  data/fastq/W204A_R1.fastq.gz   data/fastq/W303C_R1.fastq.gz   data/fastq/W404A_R1.fastq.gz\ndata/fastq/NW102C_R1.fastq.gz   data/fastq/NW203A_R1.fastq.gz   data/fastq/NW305C_R1.fastq.gz   data/fastq/W101AB_R1.fastq.gz   data/fastq/W204BC_R1.fastq.gz  data/fastq/W304AB_R1.fastq.gz  data/fastq/W404BC_R1.fastq.gz\ndata/fastq/NW103AB_R1.fastq.gz  data/fastq/NW203BC_R1.fastq.gz  data/fastq/NW403A_R1.fastq.gz   data/fastq/W101C_R1.fastq.gz    data/fastq/W205A_R1.fastq.gz   data/fastq/W304C_R1.fastq.gz\ndata/fastq/NW103C_R1.fastq.gz   data/fastq/NW304A_R1.fastq.gz   data/fastq/NW403BC_R1.fastq.gz  data/fastq/W103AB_R1.fastq.gz   data/fastq/W205BC_R1.fastq.gz  data/fastq/W403AB_R1.fastq.gz\ndata/fastq/NW201AB_R1.fastq.gz  data/fastq/NW304BC_R1.fastq.gz  data/fastq/NW404A_R1.fastq.gz   data/fastq/W103C_R1.fastq.gz    data/fastq/W303AB_R1.fastq.gz  data/fastq/W403C_R1.fastq.gz\nSome more file matching examples with * — if you would be in your data/fastq dir, then:\n\n\n\nPattern\nMatches files whose names…\n\n\n\n\n*\nContain anything (matches all files)\n\n\n*fastq.gz\nEnd in “.fastq.gz”\n\n\nNW1*\nStart with “NW1”\n\n\n*_R1*\nContain “_R1”\n\n\n\n\n\n Exercise: Practice with *\nWhat pattern would you use if you wanted to select FASTQ files for the samples whose IDs end in AB (e.g. NW102AB)?\n\n\nClick here for the solutions\n\nWe’ll need a * on either side of our pattern, because the file names neither start not end with the pattern:\nls data/fastq/*AB_R*\ndata/fastq/NW102AB_R1.fastq.gz  data/fastq/NW103AB_R2.fastq.gz  data/fastq/NW305AB_R1.fastq.gz  data/fastq/W101AB_R2.fastq.gz  data/fastq/W303AB_R1.fastq.gz  data/fastq/W304AB_R2.fastq.gz\ndata/fastq/NW102AB_R2.fastq.gz  data/fastq/NW201AB_R1.fastq.gz  data/fastq/NW305AB_R2.fastq.gz  data/fastq/W103AB_R1.fastq.gz  data/fastq/W303AB_R2.fastq.gz  data/fastq/W403AB_R1.fastq.gz\ndata/fastq/NW103AB_R1.fastq.gz  data/fastq/NW201AB_R2.fastq.gz  data/fastq/W101AB_R1.fastq.gz   data/fastq/W103AB_R2.fastq.gz  data/fastq/W304AB_R1.fastq.gz  data/fastq/W403AB_R2.fastq.gz\n\n\n\n\n\n6.2 For loops\nLoops are a universal element of programming languages, and are used to repeat operations. Here, we’ll only cover the most common type of loop: the for loop.\nA for loop iterates over a collection, such as a list of files, and allows you to perform one or more actions for each element in the collection. In the example below, our “collection” is just a short list of numbers (1, 2, and 3):\n\nfor a_number in 1 2 3; do\n    echo \"In this iteration of the loop, the number is $a_number\"\n    echo \"--------\"\ndone\n\nIn this iteration of the loop, the number is 1\n--------\nIn this iteration of the loop, the number is 2\n--------\nIn this iteration of the loop, the number is 3\n--------\n\n\nThe indented lines between do and done contain the code that is being executed as many times as there are items in the collection: in this case 3 times, as you can tell from the output above.\n\n\n\n\n\n\nWhat was actually run under the hood is the following:\n\n\n\n# (Don't run this)\na_number=1\necho \"In this iteration of the loop, the number is $a_number\"\necho \"--------\"\n\na_number=2\necho \"In this iteration of the loop, the number is $a_number\"\necho \"--------\"\n\na_number=3\necho \"In this iteration of the loop, the number is $a_number\"\necho \"--------\"\n\n\n\nCombining loops and globbing\nA very useful strategy is to loop over files with globbing, for example:\nfor fastq_file in data/fastq/*fastq.gz; do\n    echo \"Running an analysis for file $fastq_file\"...\n    # Additional commands to process the FASTQ file\ndone\nRunning an analysis for file data/fastq/NW102AB_R1.fastq.gz...\nRunning an analysis for file data/fastq/NW102AB_R2.fastq.gz...\nRunning an analysis for file data/fastq/NW102C_R1.fastq.gz...\nRunning an analysis for file data/fastq/NW102C_R2.fastq.gz...\nRunning an analysis for file data/fastq/NW103AB_R1.fastq.gz...\nRunning an analysis for file data/fastq/NW103AB_R2.fastq.gz...\nRunning an analysis for file data/fastq/NW103C_R1.fastq.gz...\n#[...output truncated...]\n\n\n\n\n\n\nA further explanation of for loop syntax (Click to expand)\n\n\n\n\n\nOn the first and last, unindented lines, for loops contain the following mandatory keywords:\n\n\n\n\n\n\n\nKeyword\nPurpose\n\n\n\n\nfor\nAfter for, we set the variable name (an arbitrary name; above we used a_number)\n\n\nin\nAfter in, we specify the collection (list of items) we are looping over\n\n\ndo\nAfter do, we have one ore more lines specifying what to do with each item\n\n\ndone\nTells the shell we are done with the loop\n\n\n\n\n\n\n\n\n Exercise: A simple loop\nCreate a loop that will print:\nmorel is an Ohio mushroom  \ndestroying_angel is an Ohio mushroom  \neyelash_cup is an Ohio mushroom\n\n\nClick for the solution\n\nfor mushroom in morel destroying_angel eyelash_cup; do\n    echo \"$mushroom is an Ohio mushroom\"\ndone\nmorel is an Ohio mushroom  \ndestroying_angel is an Ohio mushroom  \neyelash_cup is an Ohio mushroom"
  },
  {
    "objectID": "homework/shell.html#footnotes",
    "href": "homework/shell.html#footnotes",
    "title": "Homework: Intro to the Unix Shell",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCommand-line Interface (CLI), as opposed to Graphical User Interface (GUI)↩︎\nIt’s certainly possible to have spaces in file names, but it’s a bad idea, and will get you into trouble sooner or later.↩︎\nBeginners will often cd into a dir just to list its contents, but the method shown below is much quicker.↩︎\nAnytime you see a word/string that starts with a $ in the shell, you can safely assume that it is a variable.↩︎"
  }
]